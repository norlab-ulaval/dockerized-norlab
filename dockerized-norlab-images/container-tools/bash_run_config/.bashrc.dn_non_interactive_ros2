#!/bin/bash
# =================================================================================================
# DN/DNA generated bash run configuration/command for non-interactive mode
#
# Usage option 1:
#   $ source .bashrc.dn_non_interactive_ros2
#
# Usage option 2:
#   Set BASH_ENV environment variable
#   >>> # Example in a dockerfile
#   >>> ENV BASH_ENV=/dockerized-norlab/dockerized-norlab-images/container-tools/bash_run_config/.bashrc.dn_non_interactive_ros2

#   Unset BASH_ENV to disable its execution
#   >>> ENV BASH_ENV=""
#
# Note:
#   This file act as a DN build stages buffer to pass instruction that will be sourced by .bashrc
#   at the DN project-core build stage non-interactive mode and at runtime by DNA.
#
# Note on BASH_ENV environment variable:
#   > When bash is started non-interactively, to run a shell script, for example, it looks for
#   >  the variable BASH_ENV in the environment, expands its value if it appears there, and uses the
#   >  expanded value as the name of a file to read and execute. Bash behaves as if the following
#   >  command were executed:
#   >       if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi
#   >  but the value of the PATH variable is not used to search for the file name.
#   Reference: See section 'Invocation' in $ man bash
#
# =================================================================================================
set -e
if [[ ${DN_ENTRYPOINT_TRACE_EXECUTION} == true ]]; then
  echo -e "\033[1;33m[DN trace]\033[0m Execute .bashrc.dn_non_interactive_ros2"
fi

if [[ ${DN_ENTRYPOINT_TRACE_EXECUTION} == true ]]; then
  echo "Sourcing dotenv .env.dn_non_interactive_ros2..."
fi
set -o allexport
source /dockerized-norlab/dockerized-norlab-images/container-tools/bash_run_config/.env.dn_non_interactive_ros2
set +o allexport
test -n "${ROS_DISTRO}" || { echo -e "\033[1;33m[DN warning]\033[0m DN env var ROS_DISTRO is not set!" 1>&2; exit 1; }


# ....Load Dockerized-NorLab container-tools libraries.............................................
_bashrc_dn_common_path=/dockerized-norlab/dockerized-norlab-images/container-tools/bash_run_config/.bashrc.dn_common
if [[ ${DN_ENTRYPOINT_TRACE_EXECUTION} == true ]]; then
  echo "Loading Dockerized-NorLab container-tools libraries..."
fi
if [[ -f "${_bashrc_dn_common_path}"  ]]; then
  source "${_bashrc_dn_common_path}" || { echo -e "\033[1;31m[DN error]\033[0m Failed to source ${_bashrc_dn_common_path}!" 1>&2; exit 1; }
else
  echo -e "\033[1;31m[DN error]\033[0m ${_bashrc_dn_common_path} is unreachable!" 1>&2 && exit 1
fi

# ....Source ROS2 underlay and overlay.............................................................
test -n "$( declare -f dn::source_ros2 )" || { echo -e "\033[1;33m[DN warning]\033[0m The DN lib is not loaded!" 1>&2; exit 1; }

# Note: dont print sdtdout as it break the pycharm helper for ssh interpreter configuration
if [[ ${DN_ENTRYPOINT_TRACE_EXECUTION} == true ]]; then
  echo "Sourcing ROS2 underlay and overlay..."
fi
dn::source_ros2 >/dev/null || { echo -e "\033[1;31m[DN error]\033[0m dn::source_ros2 failled!" 1>&2; exit 1; }

test -n "${ROS_VERSION}" || { echo -e "\033[1;33m[DN warning]\033[0m ROS2 underlay was not sourced!" 1>&2; exit 1; }

if [[ ${DN_ENTRYPOINT_TRACE_EXECUTION} == true ]]; then
  echo ".bashrc.dn_non_interactive_ros2 completed succesfully."
fi
# ====Build-time appended instructions=============================================================
