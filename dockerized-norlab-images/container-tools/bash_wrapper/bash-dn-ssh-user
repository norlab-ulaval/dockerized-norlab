#!/bin/bash
# =================================================================================================
# Bash wrapper tailormade for the ssh server user used for remote IDE debugging.
#
# Usage in Dockerfile:
#   SHELL ["/usr/local/bin/bash-dn-ssh-user", "-c"]
#   RUN echo "command executed in bash-dn-ssh-user"
#
# Usage in script:
#   $ usermod --shell /usr/local/bin/bash-dn-ssh-user "${DN_SSH_SERVER_USER}"
#
# Options:
#   any bash flag
#
# Positional argument:
#   Instructions in RUN, CMD or ENTRYPOINT are passed to the '-c' flag.
#
# =================================================================================================
#function dn::bash_dn_ssh_server_user() {
#  local bash_run_config_root="/dockerized-norlab/dockerized-norlab-images/container-tools/bash_run_config"
#
#  # (CRITICAL) ToDo: assess using this line (ref task NMO-770) â†“ instead of sourcing it.
#  export BASH_ENV="${bash_run_config_root}/.bashrc.dn_non_interactive_ssh"
#
#  # ....Execute commands...........................................................................
#  if [[ ${DN_ENTRYPOINT_TRACE_EXECUTION} == true ]]; then
#    echo -e "Executing $ \033[1;2mexec bash ${cmds[*]}${MSG_END_FORMAT}\033[0m"
#  fi
#  exec bash "$@" || return 1
#  return 0
#}
#
#dn::bash_dn_ssh_server_user "$@" || exit 1

function dn::bash_dn_runtime_ros2() {
  local cmds=()
  local bash_run_config_root="/dockerized-norlab/dockerized-norlab-images/container-tools/bash_run_config"
  local c_flag_buffer
  local remaining=()

  # ....Parse bash flags...........................................................................
  while [ $# -gt 0 ]; do
    case $1 in
      -c) # Fetch all argument preceeding '-c <the command string>'
        c_flag_buffer="; $2"
        shift
        shift
        ;;
      --init-file|--rcfile|-O|+O)
        cmds+=("$1") # flag
        cmds+=("$2") # file/shopt_option
        shift
        shift
        ;;
      -*|--*) # Fetch all argument preceeding '-c <the command string>'
        cmds+=("$1")
        shift
        ;;
      *)
        remaining+=( "${@:-bash}" )
        break
        ;;
    esac
  done

  # Insert DN lib sourcing logic before command string arguments
  cmds+=( "-c" "\"source ${bash_run_config_root}/.bashrc.dn_non_interactive_ssh${c_flag_buffer}; ${remaining[@]}\"" )

  # ....Execute commands...........................................................................
  if [[ ${DN_ENTRYPOINT_TRACE_EXECUTION} == true ]]; then
    echo -e "Executing $ \033[1;2mexec bash ${cmds[*]}${MSG_END_FORMAT}\033[0m"
  fi
  exec bash "${cmds[@]}" || return 1
  return 0
}

dn::bash_dn_runtime_ros2 "$@" || exit 1
