
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS ros2-install

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}


ARG ROS_DISTRO
ARG ROS_PKG
ENV ROS_DISTRO=${ROS_DISTRO:?'Environment variable not set'}
ENV ROS_PKG=${ROS_PKG:?'Environment variable not set'}
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PYTHON_VERSION=3

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

ENV DN_DEV_WORKSPACE=$HOME/ros2_ws

# ====Begin Dockerized-NorLab======================================================================

# ....Setup timezone and localization..............................................................
# change the locale from POSIX to UTF-8
RUN apt-get update && \
    apt-get install --assume-yes --no-install-recommends \
        locales \
    && rm -rf /var/lib/apt/lists/* \
    && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8


# ....Install ROS2.................................................................................

RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        software-properties-common \
        curl \
        python3-argcomplete \
    && rm -rf /var/lib/apt/lists/* \
    && add-apt-repository universe \
    && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null


RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \
    && apt-get update --fix-missing \
    && apt-get install --assume-yes \
        ros-${ROS_DISTRO}-${ROS_PKG} \
        ros-${ROS_DISTRO}-rqt-graph \
        ros-${ROS_DISTRO}-rviz2 \
        ros-${ROS_DISTRO}-rosbridge-server \
        ros-${ROS_DISTRO}-demo-nodes-py \
        ros-${ROS_DISTRO}-demo-nodes-cpp \
        ros-dev-tools \
        python3-rosdep \
        python3-flake8 \
        python3-colcon-common-extensions \
        python3-vcstool \
        libasio-dev \
        libtinyxml2-dev \
        libcunit1-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && python3 -m pip install --upgrade pip \
    && pip3 install --no-cache-dir scikit-build \
    && pip3 install --upgrade --no-cache-dir --verbose cmake

# Note ref cmake upgrade via pip:
#   - upgrade cmake - https://stackoverflow.com/a/56690743
#   - this is needed to build some of the ROS2 packages
#   - use pip to upgrade cmake instead because of kitware's rotating GPG keys:
#   - https://github.com/dusty-nv/jetson-containers/issues/216

# ====Build ROS2 workspace=========================================================================
# Note: Next line is for creating the directories without using a RUN to keep number of layer small
WORKDIR ${DN_DEV_WORKSPACE}/src

WORKDIR ${DN_DEV_WORKSPACE}

# ....Quick start workspace with a minimal ROS package.............................................
RUN git clone https://github.com/ros2/examples src/examples -b foxy \
    && cd src/examples/rclcpp || exit 1

RUN echo "sourcing /opt/ros/${ROS_DISTRO}/setup.bash" \
    && source /opt/ros/${ROS_DISTRO}/setup.bash \
    && apt-get update --fix-missing \
    && rosdep init \
    && rosdep update --rosdistro ${ROS_DISTRO} --include-eol-distros \
    && rosdep install  \
            --ignore-packages-from-source \
            --from-path ./src  \
            --rosdistro ${ROS_DISTRO}  \
            -y \
    && colcon version-check \
    && colcon build \
            --symlink-install \
            --event-handlers console_direct+


# ===Remove dustynv entrypoint from .bashrc. ======================================================
# Note: Source ROS in the dn_ros2_entrypoint.bash instead"

RUN sed --in-place "s;source /ros_entrypoint.sh;;" "$HOME/.bashrc" \
    && rm --force /ros_entrypoint.sh


FROM ros2-install as test

WORKDIR ${DN_DEV_WORKSPACE}

RUN echo "sourcing /opt/ros/${ROS_DISTRO}/setup.bash" \
    && source /opt/ros/${ROS_DISTRO}/setup.bash \
    && echo "sourcing ${DN_DEV_WORKSPACE}/install/setup.bash" \
    && source ${DN_DEV_WORKSPACE}/install/setup.bash \
    && echo "Sanity check" \
    && echo ROS_VERSION=${ROS_VERSION:?'Build argument needs to be set and non-empty.'} \
    && echo ROS_PYTHON_VERSION=${ROS_PYTHON_VERSION:?'Build argument needs to be set and non-empty.'} \
    && echo ROS_DISTRO=${ROS_DISTRO:?'Build argument needs to be set and non-empty.'} \
    && echo AMENT_PREFIX_PATH=${AMENT_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo COLCON_PREFIX_PATH=${COLCON_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo PYTHONPATH=${PYTHONPATH:?'Build argument needs to be set and non-empty.'} \
    && colcon test \
    && python -c "import rclpy" \
    && ros2 pkg list

RUN echo "Check workspace directory installation"  \
    && [[ -d ${DN_DEV_WORKSPACE}/build ]] \
    && [[ -d ${DN_DEV_WORKSPACE}/install ]] \
    && [[ -d ${DN_DEV_WORKSPACE}/log ]] \
    && [[ -d ${DN_DEV_WORKSPACE}/src ]] \
    || exit 1


