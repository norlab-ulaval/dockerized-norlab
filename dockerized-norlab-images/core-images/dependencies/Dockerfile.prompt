
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS promt-tools

# Note: We dont use ARG here has we want to be overwrited at runtime
ENV DN_CONTAINER_NAME=${DN_CONTAINER_NAME:-IamNorLab}
ENV DN_ACTIVATE_POWERLINE_PROMT="${DN_ACTIVATE_POWERLINE_PROMT:-true}"

SHELL ["/bin/bash", "-c"]

# ...Configure prompt................................................................................
# ‚ôú Doc: https://powerline.readthedocs.io

# Install Powerline requirement
# Be advise, dont install `xrandr` it's not compatible with the Jetson kernel.
RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        socat \
        fonts-powerline \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip3 install --no-cache-dir --verbose \
        psutil \
        powerline-status

    # RUN pip3 install --no-cache-dir --verbose pygit2  # Not required by Powerline if Git is installed

# Require a Vim installation suporting python
#       $ vim --version | grep +python
#       +python/dyn +python3/dyn
# üëçüèº if it print either +python or +python3


# . . Install Powerline + special font pack. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Note: If Powerline prompt fonts are missing in PyCharm terminal, check that the `Console Scheme` / `Consol Font` /  `Use console font instead of default` is set to `Font:` `MesloLGS NF` (!)

### Ref: https://github.com/powerline/fonts
#RUN pip3 install --no-cache-dir --verbose \
#     powerline-status
#
#RUN apt-get update \
#    && apt-get install -y --no-install-recommends  \
#      fonts-powerline \
#    && rm -rf /var/lib/apt/lists/*


# . . Config bash shell. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Fetched Powerline install location using:
#    $(pip3 show powerline-status | grep Location: | sed 's/Location: //g')/powerline

# Note: regarding the `${TMP_PV:-7:-3}` docker notation instead of the unix notation ${TMP_PV:7:3}, see post
#  - How to use combination of ARG and ENV in Dockerfile to prevent unsupported modifier in substitution?: https://stackoverflow.com/questions/68935923/how-to-use-combination-of-arg-and-env-in-dockerfile-to-prevent-unsupported-modif
#  - https://docs.docker.com/engine/reference/builder/#using-arg-variables

WORKDIR /dockerized-norlab
#WORKDIR /dockerized-norlab/dockerized-norlab-images/container-tools

# ToDo: on dev task end >> mute this line
RUN tree -L 1

RUN cd /dockerized-norlab/dockerized-norlab-images/container-tools \
    && source import_dockerized_norlab_container_tools.bash \
    && n2st::set_which_python3_version \
    && export POWERLINE_DIR=/usr/local/lib/python${PYTHON3_VERSION}/dist-packages/powerline \
    && ( \
        ## Note: powerline-daemon and powerline10k are OS specific app.
        echo ""; \
        echo "# >>> dockerized-norlab prompt "; \
    #    echo "if [ -f `which powerline-daemon` ]; then"; \
        ## Note: Use $"VAR" instead of "$VAR" to write the $VAR in the bashrc without substitution
    #    echo "if [[ '$DN_ACTIVATE_POWERLINE_PROMT' == 'true' ]]; then"; \
        echo "if [[ $"DN_ACTIVATE_POWERLINE_PROMT" == 'true' ]]; then"; \
        echo "  # Start the powerline daemon quietly"; \
        echo "  powerline-daemon --quiet"; \
        echo "  # Set Powerline env var for bash"; \
        echo "  POWERLINE_BASH_CONTINUATION=1"; \
        echo "  POWERLINE_BASH_SELECT=1"; \
        echo "  # Invoke binding script"; \
        echo "  . ${POWERLINE_DIR}/bindings/bash/powerline.sh"; \
        echo "else "; \
        echo "  # Skip or stop Powerline prompt configuration"; \
        echo "  powerline-daemon --quiet --kill"; \
    #    echo "  export PS1='‚ùÜ ÓÇ± \e[0;34m$"{DN_CONTAINER_NAME}"\e[0m ÓÇ± \w\$ '"; \
    #    echo "  export PS1='\033[1;34m‚ùÜ ÓÇ± $"{DN_CONTAINER_NAME}" ÓÇ±\033[0m\033[2m \w \033[0m\033[1;34mÓÇ±\033[0m '"; \
    #    echo "  export PS1='\033[1;37m‚ùÜ ÓÇ±\033[0m\033[2m \w \033[0m\033[1;37mÓÇ±\033[0m '"; \
    #    echo "  export PS1='\033[1;37m‚ùÜ ‚Ä∫\033[0m\033[2m \w\033[0m\033[1;37m\$\033[0m '"; \
    #    echo "  export PS1='\033[1;37m‚ùÜ ÓÇ±\033[0m\033[2m \w\033[0m\033[1;37m\$\033[0m '"; \
        ## Note: `\[ .. \]` is required to escape the sequence lenght from the prompt line lenght as there is a limit  \
        ##  https://unix.stackexchange.com/questions/71007/how-to-customize-ps1-properly
    #    echo '  export PS1="\[\033[1;37m‚ùÜ ‚ùØ\033[0m\033[2m \$``{DN_CONTAINER_NAME}`` \033[0m\033[1;37m‚ùØ\033[0m\033[2m \w\033[0m\033[1;37m\$\033[0m \]"'; \
        echo '  export PS1="\[\033[1;37m\]‚ùÜ ‚ùØ\[\033[0m\033[2m\] \$``{DN_CONTAINER_NAME}`` \[\033[0m\033[1;37m\]‚ùØ\[\033[0m\033[2m\] \w\[\033[0m\033[1;37m\]\$\[\033[0m\] "'; \
        echo "fi"; \
        echo "# <<< dockerized-norlab prompt "; \
        echo ""; \
      ) >> ~/.bashrc


ENV POWERLINE_TMP=/tmp/powerline_tmp
WORKDIR $POWERLINE_TMP

COPY prompt/config_files/config.json config_files/
COPY prompt/config_files/themes/shell/dockerized_snow.json config_files/themes/shell/dockerized_snow.json
COPY prompt/config_files/colorschemes/shell/dockerized_snow.json config_files/colorschemes/shell/dockerized_snow.json

#WORKDIR /dockerized-norlab/dockerized-norlab-images/container-tools
RUN cd /dockerized-norlab/dockerized-norlab-images/container-tools \
    && source import_dockerized_norlab_container_tools.bash \
    && n2st::set_which_python3_version \
    && export POWERLINE_DIR=/usr/local/lib/python${PYTHON3_VERSION}/dist-packages/powerline \
    && cd $POWERLINE_TMP \
    && mkdir -p $POWERLINE_DIR/config_files/ \
    && mkdir -p $POWERLINE_DIR/config_files/themes/shell/ \
    && mkdir -p $POWERLINE_DIR/config_files/colorschemes/shell/ \
    && mv $POWERLINE_TMP/config_files/config.json $POWERLINE_DIR/config_files/ \
    && mv $POWERLINE_TMP/config_files/themes/shell/dockerized_snow.json $POWERLINE_DIR/config_files/themes/shell/ \
    && mv $POWERLINE_TMP/config_files/colorschemes/shell/dockerized_snow.json $POWERLINE_DIR/config_files/colorschemes/shell/

# ....Set Prompt logo..............................................................................
## Dockerized-Norlab (legacy code)
#RUN echo DS_LOGO=$'\u22EFùêí\u22EF' >> ~/.bashrc
#RUN export DS_LOGO=$'\uf2dc' >> ~/.bashrc  #            nf-fa-snowflake_o
## Dockerized-snow (legacy code)
#RUN export DS_LOGO=$'\U22EF\U1D412\U22EF'  # ‚ãØùêí‚ãØ        mathematical bold capital s (U+1D412)
#RUN export DS_LOGO=$'\U1D516' >> ~/.bashrc # ùîñ         mathematical fraktur capital s U+1D516
#RUN export DS_LOGO=$'\U1D57E' >> ~/.bashrc # ùïæ         mathematical bold fraktur capital s U+1D57E

CMD [ "bash" ]



