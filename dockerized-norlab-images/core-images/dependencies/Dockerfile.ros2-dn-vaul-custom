
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS ros2-vaul-custom-install

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

# ====Begin install================================================================================
#WORKDIR ${DN_DEV_WORKSPACE}

RUN apt-get update \
    && apt-get upgrade -y \
    && apt-get install -y \
      "ros-${ROS_DISTRO:?err}-rosbridge-server" \
      "ros-${ROS_DISTRO}-slam-toolbox" \
      cifs-utils \
      g++ \
    && apt-get autoremove -y \
    && apt-get clean


# Copied from https://github.com/vaul-ulaval/setup_scripts/blob/main/2_install_opencv4_source.sh
#
# (Priority) ToDo: Implement logic to fetch and execute 2_install_opencv4_source.sh file instead
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG version="4.6.0"
ARG folder="workspace"
WORKDIR "/opt"
RUN echo "------------------------------------" \
    && echo "** Install requirement (1/4)" \
    && echo "------------------------------------" \
    && apt-get update \
    && apt-get install -y \
        build-essential \
        make \
        git \
        libgtk2.0-dev \
        pkg-config \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libgstreamer1.0-dev \
        libgstreamer-plugins-base1.0-dev \
        python3.8-dev \
        python-dev \
        python-numpy \
        python3-numpy \
        libtbb2 \
        libtbb-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libdc1394-22-dev \
        libv4l-dev \
        v4l-utils \
        qv4l2 \
        curl \
    && apt-get autoremove -y \
    && apt-get clean \
    && echo "------------------------------------" \
    && echo "** Download opencv "${version}" (2/4)" \
    && echo "------------------------------------" \
    && mkdir $folder \
    && cd ${folder} \
    && curl -L https://github.com/opencv/opencv/archive/${version}.zip -o opencv-${version}.zip \
    && curl -L https://github.com/opencv/opencv_contrib/archive/${version}.zip -o opencv_contrib-${version}.zip \
    && unzip opencv-${version}.zip \
    && unzip opencv_contrib-${version}.zip \
    && rm opencv-${version}.zip opencv_contrib-${version}.zip

WORKDIR "/opt/${folder}/opencv-${version}/release"
&& echo -e "[WARNING] ${CV_WARN[*]}" ;
RUN echo "------------------------------------" \
    && echo "** Build opencv "${version}" (3/4)" \
    && echo "------------------------------------" \
    && CV_WARN=("Removing previously installed version of opencv as VAUL require CUDA enable version.") \
    && apt-get purge -y *opencv* \
    && echo "${CV_WARN[*]}" >> /dn_warning.log \
    && echo -e "[WARNING] ${CV_WARN[*]}" ; \
    && if [[ ${TARGETPLATFORM:?err} != ${BUILDPLATFORM:?err} ]]; then \
        echo -e "Builder is running in architecture virtualisation, so no cuda available" \
        && python3 -c "import cv2; print( f'Opencv version: {cv2.__version__}' )" ; \
       else \
        echo -e "Builder is running on native architecture" \
        && cmake -D WITH_CUDA=ON -D WITH_CUDNN=ON -D CUDA_ARCH_BIN="7.2,8.7" -D CUDA_ARCH_PTX="" -D OPENCV_GENERATE_PKGCONFIG=ON -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${version}/modules -D WITH_GSTREAMER=ON -D WITH_LIBV4L=ON -D BUILD_opencv_python3=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_EXAMPLES=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \
        && make -j$(nproc) \
        && echo "------------------------------------" \
        && echo "** Install opencv "${version}" (4/4)" \
        && echo "------------------------------------" \
        && make install ; \
       fi \
    && echo 'export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH' >> ~/.bashrc \
    && echo 'export PYTHONPATH=/usr/local/lib/python3.8/site-packages/:$PYTHONPATH' >> ~/.bashrc \
    && source ~/.bashrc \
    && echo "** Install opencv "${version}" successfully" \
    && echo "** Bye :)"

# =================================================================================================

ARG TARGETPLATFORM
ARG BUILDPLATFORM
WORKDIR "/opt"
# (vaul-ulaval/setup_scripts) Dependencies not in rosdep
#   See https://github.com/vaul-ulaval/setup_scripts/blob/main/6_load_ros_ws.bash
RUN echo "Procedure at https://github.com/f1tenth/range_libc?tab=readme-ov-file#python-wrappers" \
    && pip3 install --no-cache-dir  \
            transforms3d \
    && echo \
    && echo "Procedure at https://github.com/f1tenth/range_libc/blob/foxy-devel/pywrapper/compile_with_cuda.sh" \
    && apt-get update \
    && apt-get install -y \
        gcc-8 \
        g++-8 \
    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8 \
    && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8 \
    && echo \
    && git clone https://github.com/f1tenth/range_libc \
    && cd range_libc/pywrapper \
    && if [[ ${TARGETPLATFORM:?err} != ${BUILDPLATFORM:?err} ]]; then \
          echo -e "Builder is running in architecture virtualisation, so no cuda available" \
          && bash ./compile.sh ; \
       else \
          echo -e "Builder is running on native architecture" \
          && bash ./compile_with_cuda.sh ; \
       fi \
    && apt-get update \
    && apt-get install -y \
      "ros-${ROS_DISTRO}-laser-filters" \
    && apt-get autoremove -y \
    && apt-get clean

#

CMD [ "bash" ]



