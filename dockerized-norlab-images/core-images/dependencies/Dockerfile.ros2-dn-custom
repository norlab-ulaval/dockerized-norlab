
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS ros2-custom-install

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

# ====Begin install================================================================================

# ....install ROS2 specific utilities..............................................................
RUN pip3 install --no-cache-dir \
      osrf-pycommon \
      rosbags \
      rosbags-dataframe \
      rosbag-tools[plot] \
    && echo \
    && apt-get update --fix-missing \
    && apt-get install --assume-yes \
            ros-${ROS_DISTRO:?err}-ackermann-msgs \
            ros-${ROS_DISTRO}-vesc-msgs \
            ros-${ROS_DISTRO}-rosbridge-msgs \
            ros-${ROS_DISTRO}-urg-node-msgs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# # https://pypi.org/project/ros2-numpy/
# # https://github.com/Box-Robotics/ros2_numpy
# # Require python >= 3.10
# ros2-numpy

## . . ros2_jetson_stats. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
#WORKDIR ${DN_DEV_WORKSPACE}/src
#RUN git clone --branch ${ROS_DISTRO} https://github.com/NVIDIA-AI-IOT/ros2_jetson_stats.git
#
#WORKDIR ${DN_DEV_WORKSPACE}
#RUN apt-get update \
#    && /bin/bash -c "pip install --upgrade jetson-stats" \
#    && /bin/bash -c "source ${DN_DEV_WORKSPACE}/install/setup.bash" \
#    && rosdep install --from-paths src --ignore-src --rosdistro ${ROS_DISTRO} --default-yes --os=ubuntu:jammy \
#    && rm -rf /var/lib/apt/lists/*

# ====Build ROS2 workspace=========================================================================
WORKDIR ${DN_DEV_WORKSPACE}

ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo "sourcing /opt/ros/${ROS_DISTRO}/setup.bash" \
    && source /opt/ros/${ROS_DISTRO}/setup.bash \
    && echo "sourcing ${DN_DEV_WORKSPACE}/install/setup.bash" \
    && source ${DN_DEV_WORKSPACE}/install/setup.bash \
    && apt-get update --fix-missing \
    && rosdep update --rosdistro ${ROS_DISTRO} --include-eol-distros \
    && rosdep fix-permissions \
    && rosdep install  \
            --ignore-packages-from-source \
            --from-path ./src  \
            --rosdistro ${ROS_DISTRO}  \
            -y \
    && colcon version-check \
    && COLCON_FLAGS=() \
    && if [[ ${TARGETPLATFORM:?err} != ${BUILDPLATFORM:?err} ]]; then \
         echo -e "Builder is running in architecture virtualisation" \
         && COLCON_FLAGS+=(--executor sequential) ; \
      else \
         echo -e "Builder is running on native architecture" \
         && COLCON_FLAGS+=(--symlink-install) ; \
      fi \
    && COLCON_FLAGS+=( \
          --cmake-clean-cache \
          --cmake-args -DCMAKE_BUILD_TYPE=Release \
          --event-handlers console_direct+ \
       ) \
    && echo -e "COLCON_FLAGS=("${COLCON_FLAGS[*]}")" \
    && colcon build ${COLCON_FLAGS[@]}

# ===Execute ros sourcing system wide instead of in .bashrc========================================
# (since .bashrc is not executed in non-interactive shell)

RUN touch /etc/profile.d/02-dn-source-ros-system-wide.sh \
    && chmod +x /etc/profile.d/02-dn-source-ros-system-wide.sh \
    && ( \
      echo ""; \
      echo "# Dockerized-NorLab › Execute ros sourcing system wide instead of in .bashrc "; \
      echo "#   which is not executed in non-interactive shell such as in pycharm-debugger"; \
      echo "echo \"sourcing /opt/ros/\$``{ROS_DISTRO}``/setup.bash from /etc/profile.d/\""; \
      echo "source /opt/ros/\$``{ROS_DISTRO}``/setup.bash"; \
      echo "if [[ -f \$``{DN_DEV_WORKSPACE}``/install/setup.bash ]]; then"; \
      echo "  echo \"sourcing \$``{DN_DEV_WORKSPACE}``/install/setup.bash from /etc/profile.d/\""; \
      echo "  source \$``{DN_DEV_WORKSPACE}``/install/setup.bash"; \
      echo "fi"; \
      echo ""; \
    ) > /etc/profile.d/02-dn-source-ros-system-wide.sh \
    && echo "" \
    && ( \
      echo ""; \
      echo "# Dockerized-NorLab › Source ROS2 environment"; \
      echo "echo \"sourcing /opt/ros/\$``{ROS_DISTRO}``/setup.bash from ~/.bashrc\""; \
      echo "source /opt/ros/\$``{ROS_DISTRO}``/setup.bash";  \
      echo "if [[ -f \$``{DN_DEV_WORKSPACE}``/install/setup.bash ]]; then"; \
      echo "  echo \"sourcing \$``{DN_DEV_WORKSPACE}``/install/setup.bash from ~/.bashrc\""; \
      echo "  source \$``{DN_DEV_WORKSPACE}``/install/setup.bash"; \
      echo "fi"; \
      echo ""; \
    ) >> ~/.bashrc

# To source ros in non-interactive & non-login shell
ENV BASH_ENV=/etc/profile.d/02-dn-source-ros-system-wide.sh

# (NICE TO HAVE) ToDo: DN_CONTAINER_NAME is being set with the build arg instead of the env at runtime
#      echo ""; \
#      echo "# Dockerized-NorLab › Quickhack for connecting to pycharm-debugger (over ssh)"; \
#      echo "export DN_CONTAINER_NAME=$DN_CONTAINER_NAME"; \
#      echo "export DN_ACTIVATE_POWERLINE_PROMT=$DN_ACTIVATE_POWERLINE_PROMT"; \

FROM ros2-custom-install AS test

# Note: ROS2 distro should be sourced automaticaly via our /etc/profile.d setup
RUN echo "Sanity check" \
    && echo ROS_VERSION=${ROS_VERSION:?'Build argument needs to be set and non-empty.'} \
    && echo ROS_PYTHON_VERSION=${ROS_PYTHON_VERSION:?'Build argument needs to be set and non-empty.'} \
    && echo ROS_DISTRO=${ROS_DISTRO:?'Build argument needs to be set and non-empty.'} \
    && echo AMENT_PREFIX_PATH=${AMENT_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
#    && echo CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo COLCON_PREFIX_PATH=${COLCON_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo PYTHONPATH=${PYTHONPATH:?'Build argument needs to be set and non-empty.'} \
    && python -c "import rclpy" \
    && ros2 pkg list


FROM ros2-custom-install AS final
WORKDIR ${DN_DEV_WORKSPACE}

CMD [ "bash" ]



