
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS ros2-custom-install

# (CRITICAL) ToDo: on task NMO-584 end >> delete this line ←
#ARG IS_TEAMCITY_RUN
#ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}
#
#SHELL ["/bin/bash", "-c"]
#ARG DEBIAN_FRONTEND=noninteractive
#
#ENV TZ=Etc/UTC
#ENV TERM=${TERM:-"xterm-256color"}

# ====Begin install================================================================================
WORKDIR ${DN_DEV_WORKSPACE}

RUN <<EOF
    pip3 install --no-cache-dir  \
        transforms3d

    apt-get update
    apt-get update --fix-missing
    apt-get upgrade -y

    # Quickhack: reinstall 'robot-state-publisher' to solved the 'process has died' error"
    apt-get install -y ros-${ROS_DISTRO}-robot-state-publisher

    apt-get install -y \
      ros-${ROS_DISTRO}-rviz2 \
      ros-${ROS_DISTRO}-rviz-visual-tools \
      ros-${ROS_DISTRO}-nav2-rviz-plugins \
      ros-${ROS_DISTRO}-rqt-graph \
      libqt5svg5

    apt-get autoremove -y
    apt-get clean

    # ....install ROS2 specific utilities..............................................................
    pip3 install --no-cache-dir \
          osrf-pycommon \
          rosbags \
          rosbags-dataframe \
          rosbag-tools[plot]

    apt-get update --fix-missing
    apt-get install --assume-yes \
        ros-${ROS_DISTRO:?err}-ackermann-msgs \
        ros-${ROS_DISTRO}-vesc-msgs \
        ros-${ROS_DISTRO}-rosbridge-msgs \
        ros-${ROS_DISTRO}-urg-node-msgs
    apt-get clean
    rm -rf /var/lib/apt/lists/*
EOF

# # https://pypi.org/project/ros2-numpy/
# # https://github.com/Box-Robotics/ros2_numpy
# # Require python >= 3.10
# ros2-numpy

## . . ros2_jetson_stats. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
#WORKDIR ${DN_DEV_WORKSPACE}/src
#RUN git clone --branch ${ROS_DISTRO} https://github.com/NVIDIA-AI-IOT/ros2_jetson_stats.git
#
#WORKDIR ${DN_DEV_WORKSPACE}
#RUN apt-get update \
#    && /bin/bash -c "pip install --upgrade jetson-stats" \
#    && /bin/bash -c "source ${DN_DEV_WORKSPACE}/install/setup.bash" \
#    && rosdep install --from-paths src --ignore-src --rosdistro ${ROS_DISTRO} --default-yes --os=ubuntu:jammy \
#    && rm -rf /var/lib/apt/lists/*

# ====Build ROS2 workspace=========================================================================
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN <<EOF

    apt-get update --fix-missing
    rosdep update --rosdistro ${ROS_DISTRO}
    rosdep fix-permissions
    rosdep install \
        --ignore-packages-from-source \
        --from-path ./src  \
        --rosdistro ${ROS_DISTRO}  \
        -y

    colcon version-check

    COLCON_FLAGS=()
    if [[ ${TARGETPLATFORM:?err} != ${BUILDPLATFORM:?err} ]]; then
      echo -e "Builder is running in architecture virtualisation"
      COLCON_FLAGS+=( "--executor" "sequential" )
    else
      echo -e "Builder is running on native architecture"
      COLCON_FLAGS+=( "--symlink-install" )
    fi

    COLCON_FLAGS+=(
          "--cmake-clean-cache"
          "--cmake-args" "-DCMAKE_BUILD_TYPE=Release"
          "--event-handlers" "console_direct+"
       )
    echo -e "COLCON_FLAGS=( ${COLCON_FLAGS[*]} )"
    colcon build ${COLCON_FLAGS[@]}

    # ===ROS sourcing logic for interactive and non-interactive shell==============================
    # (since .bashrc is not executed in non-interactive shell)

    # Note:
    #  - Environment variable formated such as "\$``{ENV_VAR}``" wont be substituted at build time.
    (
        echo ""
        echo "# >>> dockerized-norlab dependencies ros2-dn-custom"
        echo "# Source ROS2 environment"
        echo "echo -e \"\\033[1;2m\" # MSG_DIMMED_FORMAT"
        echo "echo \"sourcing /opt/ros/${ROS_DISTRO}/setup.bash from /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash\""
        echo "source /opt/ros/${ROS_DISTRO}/setup.bash"
        echo "if [[ -f \$``{DN_DEV_WORKSPACE}``/install/setup.bash ]]; then"
        echo "  echo \"sourcing \$``{DN_DEV_WORKSPACE}``/install/setup.bash from /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash\""
        echo "  source \$``{DN_DEV_WORKSPACE}``/install/setup.bash"
        echo "fi"
        echo "echo -e \"\\033[0m\" # MSG_END_FORMAT"
        echo "# <<< dockerized-norlab dependencies ros2-dn-custom"
        echo ""
    ) >> /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash

    (
        echo ""
        echo "# >>> dockerized-norlab dependencies ros2-dn-custom"
        echo "# Source ROS2 environment"
        echo "echo -e \"\\033[1;2m\" # MSG_DIMMED_FORMAT"
        echo "echo \"sourcing /opt/ros/${ROS_DISTRO}/setup.bash from /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc_non_interactive.bash\""
        echo "source /opt/ros/${ROS_DISTRO}/setup.bash"
        echo "if [[ -f \$``{DN_DEV_WORKSPACE}``/install/setup.bash ]]; then"
        echo "  echo \"sourcing \$``{DN_DEV_WORKSPACE}``/install/setup.bash from /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc_non_interactive.bash\""
        echo "  source \$``{DN_DEV_WORKSPACE}``/install/setup.bash"
        echo "fi"
        echo "echo -e \"\\033[0m\" # MSG_END_FORMAT"
        echo "# <<< dockerized-norlab dependencies ros2-dn-custom"
        echo ""
    ) >> /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc_non_interactive.bash

    # (NICE TO HAVE) ToDo: DN_CONTAINER_NAME is being set with the build arg instead of the env at runtime
    #      echo ""; \
    #      echo "# Dockerized-NorLab › Quickhack for connecting to pycharm-debugger (over ssh)"; \
    #      echo "export DN_CONTAINER_NAME=$DN_CONTAINER_NAME"; \
    #      echo "export DN_ACTIVATE_POWERLINE_PROMT=$DN_ACTIVATE_POWERLINE_PROMT"; \

    echo "Add ROS2 specific aliases"
    (
        echo ""
        echo "# >>> dockerized-norlab dependencies ros2-dn-custom"
        echo "alias dn_source_ros_worspace_overlay='echo \"Sourcing ${DN_DEV_WORKSPACE} overlay \" && source ${DN_DEV_WORKSPACE}/install/local_setup.bash'"
        echo "# <<< dockerized-norlab dependencies ros2-dn-custom"
        echo ""
    ) >> /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bash_alias.bash

    echo "Add ROS2 specific config to /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash"
    (
        echo ""
        echo "# >>> dockerized-norlab dependencies ros2-dn-custom"
        echo "# Enable ROS2 log collouring"
        echo "export RCUTILS_COLORIZED_OUTPUT=1"
        echo "# <<< dockerized-norlab dependencies ros2-dn-custom"
        echo ""
    ) >> /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash
EOF


FROM ros2-custom-install AS test

# Note: ROS2 distro should be sourced automaticaly via our dn_bashrc_non_interactive.bash setup
RUN <<EOF
    echo "(ROS2 sourcing) Non-interactive shell sanity check. Validate dn_bashrc_non_interactive.bash logic"
    {
        test -n ${ROS_VERSION:?'Build argument needs to be set and non-empty.'} && \
        test -n ${ROS_PYTHON_VERSION:?'Build argument needs to be set and non-empty.'} && \
        test -n ${ROS_DISTRO:?'Build argument needs to be set and non-empty.'} && \
        test -n ${AMENT_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \
    #    test -n ${CMAKE_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \
        test -n ${COLCON_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \
        test -n ${PYTHONPATH:?'Build argument needs to be set and non-empty.'} ;
    } || exit 1

    {
        python -c "import rclpy" && \
        ros2 pkg list ;
    } || exit 1

    echo -e "\nLog dn_bashrc.bash content\n"
    cat /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash

    echo -e "\nLog dn_bashrc_non_interactive.bash content\n"
    cat /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc_non_interactive.bash

EOF

# Note: ROS2 distro should be sourced automaticaly via our dn_bashrc_non_interactive.bash setup
SHELL ["/bin/bash", "-i", "-c"]
RUN <<EOF
    echo "(ROS2 sourcing) Interactive shell sanity check. Validate dn_bashrc.bash logic"
    {
        test -n ${ROS_VERSION:?'Build argument needs to be set and non-empty.'} && \
        test -n ${ROS_PYTHON_VERSION:?'Build argument needs to be set and non-empty.'} && \
        test -n ${ROS_DISTRO:?'Build argument needs to be set and non-empty.'} && \
        test -n ${AMENT_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \
        #    test -n ${CMAKE_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \
        test -n ${COLCON_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \
        test -n ${PYTHONPATH:?'Build argument needs to be set and non-empty.'} ;
    } || exit 1

    {
        python -c "import rclpy" && \
        ros2 pkg list ;
    } || exit 1
EOF


FROM ros2-custom-install AS final

# ....TMP DEV introspection........................................................................
## (CRITICAL) ToDo: on task end >> mute next bloc ↓↓
#RUN <<EOF
#    cat /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc_non_interactive.bash
#    echo
#    cat /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash
#    exit 1
#EOF
#RUN echo "${0}:not implemented error" && exit 1
# ........................................................................TMP DEV introspection....





