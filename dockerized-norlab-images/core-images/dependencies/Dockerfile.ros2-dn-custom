
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG

FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS ros2-custom-install

ARG TARGETPLATFORM
ARG BUILDPLATFORM

# ====Begin install================================================================================
WORKDIR ${DN_DEV_WORKSPACE}

RUN <<EOF
    # Install dependencies
    apt-get update
    apt-get upgrade --assume-yes

    apt-get install --assume-yes --no-install-recommends \
        ros-${ROS_DISTRO:?err}-rosbridge-msgs \
        python3-tornado \
        python3-bson \
        python3-pymongo \
        python3-regex \
        || exit 1

    pip3 install --no-cache-dir  \
        transforms3d \
        || exit 1

    # Quickhack: reinstall 'robot-state-publisher' to solved the 'process has died' error"
    apt-get install --assume-yes --no-install-recommends \
        ros-${ROS_DISTRO}-robot-state-publisher \
        || exit 1

    apt-get install --assume-yes --no-install-recommends \
        ros-${ROS_DISTRO}-rviz-visual-tools \
        ros-${ROS_DISTRO}-nav2-rviz-plugins \
        libqt5svg5 \
        || exit 1


    # ....install ROS2 specific utilities..............................................................
    pip3 install --no-cache-dir \
        osrf-pycommon \
        rosbags \
        rosbags-dataframe \
        rosbag-tools[plot] \
        || exit 1

    apt-get install --assume-yes --no-install-recommends \
        ros-${ROS_DISTRO:?err}-ackermann-msgs \
        ros-${ROS_DISTRO}-rosbridge-msgs \
        ros-${ROS_DISTRO}-urg-node-msgs \
        || exit 1

    # ....Teardown.................................................................................
    apt-get autoremove --assume-yes
    apt-get clean
    rm -rf /var/lib/apt/lists/*
EOF

# # https://pypi.org/project/ros2-numpy/
# # https://github.com/Box-Robotics/ros2_numpy
# # Require python >= 3.10
# ros2-numpy

# ====Build ROS2 workspace=========================================================================
RUN <<EOF

    apt-get update || exit 1

    test -n "$( declare -f dn::source_ros2_underlay_only )" || { echo -e "\033[1;31m[DN error]\033[0m The DN lib is not loaded!" 1>&2 && exit 1; }
    dn::source_ros2_underlay_only || exit 1

    rosdep update --rosdistro ${ROS_DISTRO:?err} || exit 1
    rosdep fix-permissions

    rosdep install \
        --ignore-packages-from-source \
        --from-path ./src \
        --rosdistro ${ROS_DISTRO} \
        -y \
        || exit 1

    colcon version-check

    COLCON_FLAGS=()
    if [[ ${TARGETPLATFORM:?err} != ${BUILDPLATFORM:?err} ]]; then
      echo -e "Builder is running in architecture virtualisation"
      COLCON_FLAGS+=( "--executor" "sequential" )
    else
      echo -e "Builder is running on native architecture"
      COLCON_FLAGS+=( "--symlink-install" )
    fi

    COLCON_FLAGS+=(
          "--cmake-clean-cache"
          "--cmake-args" "-DCMAKE_BUILD_TYPE=Release"
          "--event-handlers" "console_direct+"
       )
    echo -e "COLCON_FLAGS=( ${COLCON_FLAGS[*]} )"
    colcon build ${COLCON_FLAGS[@]} || exit 1

    # ....Teardown.................................................................................
    apt-get autoremove --assume-yes
    apt-get clean
    rm -rf /var/lib/apt/lists/*
EOF


FROM ros2-custom-install AS test

RUN <<EOF
    echo "(ROS2 sourcing) Non-interactive shell sanity check. Validate .bashrc.dn_non_interactive logic..."

    echo -e "\nLog .bashrc.dn_non_interactive state\n"
    cat /dockerized-norlab/dockerized-norlab-images/container-tools/bash_run_config/.bashrc.dn_non_interactive

    test -n "$( declare -f dn::source_ros2 )" || { echo -e "\033[1;31m[DN error]\033[0m The DN lib is not loaded!" 1>&2 && exit 1; }
    dn::source_ros2 || exit 1

    echo -e "\nPre-condition check...\n"
    {
        test -n ${ROS_VERSION:?'Build argument needs to be set and non-empty.'} && \
        test -n ${ROS_PYTHON_VERSION:?'Build argument needs to be set and non-empty.'} && \
        test -n ${ROS_DISTRO:?'Build argument needs to be set and non-empty.'} && \
        test -n ${AMENT_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \
        test -n ${COLCON_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \
        test -n ${PYTHONPATH:?'Build argument needs to be set and non-empty.'} ;
    } || exit 1
    #    test -n ${CMAKE_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \

    echo -e "\nCheck ros2 is available...\n"
    {
        python -c "import rclpy" && \
        ros2 pkg list && \
        test -n "$(ros2 pkg list | grep -e ros_core)" &&  \
        test -n "$(ros2 pkg list | grep -e rclpy)" &&  \
        test -n "$(ros2 pkg list | grep -e ackermann_msgs)" ;
    } ||  exit 1

    echo "(ROS2 sourcing) Non-interactive shell sanity check ok."
EOF

# (CRITICAL) ToDo: assess >> There is no point testing interactive vs non-interactive ROS2 related logic in here anymore
SHELL ["/bin/bash", "-i", "-c"]
RUN <<EOF
    echo "(ROS2 sourcing) Interactive shell sanity check. Validate .bashrc.dn logic..."

    echo -e "\nLog .bashrc.dn state\n"
    cat /dockerized-norlab/dockerized-norlab-images/container-tools/bash_run_config/.bashrc.dn

    test -n "$( declare -f dn::source_ros2 )" || { echo -e "\033[1;31m[DN error]\033[0m The DN lib is not loaded!" 1>&2 && exit 1; }
    dn::source_ros2 || exit 1

    echo -e "\nPre-condition check...\n"
    {
        test -n ${ROS_VERSION:?'Build argument needs to be set and non-empty.'} && \
        test -n ${ROS_PYTHON_VERSION:?'Build argument needs to be set and non-empty.'} && \
        test -n ${ROS_DISTRO:?'Build argument needs to be set and non-empty.'} && \
        test -n ${AMENT_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \
        test -n ${COLCON_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \
        test -n ${PYTHONPATH:?'Build argument needs to be set and non-empty.'} ;
    } || exit 1
        #    test -n ${CMAKE_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} && \

    echo -e "\nCheck ros2 is available...\n"
    {
        python -c "import rclpy" && \
        ros2 pkg list && \
        test -n "$(ros2 pkg list | grep -e ros_core)" &&  \
        test -n "$(ros2 pkg list | grep -e rclpy)" &&  \
        test -n "$(ros2 pkg list | grep -e ackermann_msgs)" ;
    } ||  exit 1

    echo "(ROS2 sourcing) Interactive shell sanity check ok."
EOF


FROM ros2-custom-install AS final





