
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS ros-custom-install

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

# ====Begin install==================================================================================

ENV DN_DEV_WORKSPACE=$HOME/ros2_ws

# ....install ROS2 specific utilities...............................................................
RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        ros-dev-tools \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && echo "=====================================================================================" \
    && pip3 install --no-cache-dir  \
            osrf-pycommon \
            rosbags \
            rosbags-dataframe \
    && echo "=====================================================================================" \
    && apt-get update --fix-missing \
    && apt-get install --assume-yes \
            ros-${ROS_DISTRO}-ackermann-msgs \
            ros-${ROS_DISTRO}-vesc-msgs \
            ros-${ROS_DISTRO}-rosbridge-msgs \
            ros-${ROS_DISTRO}-urg-node-msgs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && echo "====================================================================================="

# https://ternaris.gitlab.io/rosbags/index.html
# https://ternaris.gitlab.io/rosbags-dataframe/

# # https://pypi.org/project/ros2-numpy/
# # https://github.com/Box-Robotics/ros2_numpy
# # Require python >= 3.10
# ros2-numpy


# Note: Next line is for creating the directories without using a RUN to keep number of layer small
WORKDIR ${DN_DEV_WORKSPACE}/src
#RUN mkdir -p "${DN_DEV_WORKSPACE}/src"

# ....install sources...............................................................................

## . . ros2_control Demos. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
## https://github.com/ros-controls/ros2_control_demos
#
#WORKDIR ${DN_DEV_WORKSPACE}/src
#RUN git clone https://github.com/ros-controls/ros2_control
#RUN git clone https://github.com/ros-controls/ros2_controllers
#RUN git clone https://github.com/ros-controls/ros2_control_demos
#
#WORKDIR ${DN_DEV_WORKSPACE}
#RUN apt-get update \
#    && /bin/bash -c "source /opt/ros/${ROS_DISTRO}/install/setup.bash" \
#    && rosdep install --from-paths src --ignore-src -r -y \
#    && rm -rf /var/lib/apt/lists/*

## . . ros2_jetson_stats. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
#WORKDIR ${DN_DEV_WORKSPACE}/src
#RUN git clone --branch humble https://github.com/NVIDIA-AI-IOT/ros2_jetson_stats.git
#
#WORKDIR ${DN_DEV_WORKSPACE}
#RUN apt-get update \
#    && /bin/bash -c "sudo -H pip install --upgrade jetson-stats" \
#    && /bin/bash -c "source /opt/ros/${ROS_DISTRO}/install/setup.bash" \
#    && rosdep install --from-paths src --ignore-src --rosdistro ${ROS_DISTRO} --default-yes --os=ubuntu:jammy \
#    && rm -rf /var/lib/apt/lists/*

## . . icp_odom_with_twist. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
#WORKDIR ${DN_DEV_WORKSPACE}/src
#RUN git clone https://github.com/norlab-ulaval/icp_odom_with_twist.git
#
#WORKDIR "${DN_DEV_WORKSPACE}"
#RUN apt-get update \
#    && rosdep install --from-paths ./src --ignore-packages-from-source --rosdistro ${ROS_DISTRO} -y


WORKDIR ${DN_DEV_WORKSPACE}

RUN echo "sourcing /opt/ros/${ROS_DISTRO}/install/setup.bash" \
    && source /opt/ros/${ROS_DISTRO}/install/setup.bash \
    && echo "sourcing /opt/ros/${ROS_DISTRO}/setup.bash" \
    && source /opt/ros/${ROS_DISTRO}/setup.bash \
    && colcon build --symlink-install \
    && echo \
    && echo "===Remove dustynv entrypoint from .bashrc. =============================================" \
    && echo "Note: Source ROS in the dn_ros2_entrypoint.bash instead" \
    && echo \
    && cd /dockerized-norlab//utilities/norlab-shell-script-tools \
    && source .env.project \
    && cd src/function_library \
    && source ./general_utilities.bash \
    && seek_and_modify_string_in_file 'source /ros_entrypoint.sh' '' "$HOME/.bashrc" \
    && echo \
    && echo "===Remove Jetson-container unused install===============================================" \
    && rm --recursive --force /ros_deep_learning \
    && rm --recursive --force /jetson-inference \
    && rm --force ros_entrypoint.sh \
    && echo \
    && echo "===Execute ros sourcing system wide instead of in .bashrc===============================" \
    && echo "(which is not executed in non-interactive shell)" \
    && touch /etc/profile.d/02-dn-source-ros-system-wide.sh \
    && chmod +x /etc/profile.d/02-dn-source-ros-system-wide.sh \
    && ( \
      echo ""; \
      echo "# Dockerized-NorLab › Execute ros sourcing system wide instead of in .bashrc "; \
      echo "#   which is not executed in non-interactive shell such as in pycharm-debugger"; \
      echo "echo \"sourcing /opt/ros/${ROS_DISTRO}/install/setup.bash from /etc/profile.d/\""; \
      echo "source /opt/ros/${ROS_DISTRO}/install/setup.bash"; \
      echo "echo \"sourcing /opt/ros/${ROS_DISTRO}/setup.bash from /etc/profile.d/\""; \
      echo "source /opt/ros/${ROS_DISTRO}/setup.bash"; \
      echo ""; \
    ) > /etc/profile.d/02-dn-source-ros-system-wide.sh \
    && echo "" \
    && ( \
      echo ""; \
      echo "# Dockerized-NorLab › Source ROS2 environment"; \
      echo "echo \"sourcing /opt/ros/${ROS_DISTRO}/install/setup.bash\""; \
      echo "source /opt/ros/${ROS_DISTRO}/install/setup.bash"; \
      echo "echo \"sourcing /opt/ros/${ROS_DISTRO}/setup.bash\""; \
      echo "source /opt/ros/${ROS_DISTRO}/setup.bash";  \
      echo ""; \
    ) >> ~/.bashrc

# To source ros in non-interactive & non-login shell
ENV BASH_ENV=/etc/profile.d/02-dn-source-ros-system-wide.sh

# (NICE TO HAVE) ToDo: DN_CONTAINER_NAME is being set with the build arg instead of the env at runtime
#      echo ""; \
#      echo "# Dockerized-NorLab › Quickhack for connecting to pycharm-debugger (over ssh)"; \
#      echo "export DN_CONTAINER_NAME=$DN_CONTAINER_NAME"; \
#      echo "export DN_ACTIVATE_POWERLINE_PROMT=$DN_ACTIVATE_POWERLINE_PROMT"; \

#        && colcon build --symlink-install --merge-install"

# ...source & check ROS environment variable........................................................
# Make sure that you have your environment properly setup. A good way to check is to ensure that environment variables
# like ROS_ROOT and ROS_PACKAGE_PATH are set:
#   $ printenv | grep ROS
# Check the ROS_PACKAGE_PATH environment variable. It should include the directory you're in:
#   $ echo $ROS_PACKAGE_PATH
#   > /home/youruser${DN_DEV_WORKSPACE}/src:/opt/ros/melodic/share

FROM ros-custom-install as test

RUN echo "sourcing /opt/ros/${ROS_DISTRO}/install/setup.bash" \
    && source /opt/ros/${ROS_DISTRO}/install/setup.bash \
    && echo "sourcing /opt/ros/${ROS_DISTRO}/setup.bash" \
    && source /opt/ros/${ROS_DISTRO}/setup.bash \
    && echo "Sanity check" \
    && echo ${ROS_VERSION:?'Build argument needs to be set and non-empty.'} \
    && echo ${ROS_PYTHON_VERSION:?'Build argument needs to be set and non-empty.'} \
    && echo ${ROS_DISTRO:?'Build argument needs to be set and non-empty.'} \
    && echo ${AMENT_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo ${CMAKE_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo ${COLCON_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo ${PYTHONPATH:?'Build argument needs to be set and non-empty.'} \
    && python -c "import rclpy"


FROM ros-custom-install as final
WORKDIR ${DN_DEV_WORKSPACE}

## (Priority) ToDo: validate >> next bloc ↓↓
## (Priority) ToDo: should be in the entrypoint instead >> next bloc ↓↓
## Note: ROS2 setup.bash location is in `${ROS_DISTRO}/install/` instead of ROS1 in `${ROS_DISTRO}/`
#RUN echo "sourcing /opt/ros/${ROS_DISTRO}/install/setup.bash" \
#    && source /opt/ros/${ROS_DISTRO}/install/setup.bash \
#    && echo "sourcing /opt/ros/${ROS_DISTRO}/setup.bash" \
#    && source /opt/ros/${ROS_DISTRO}/setup.bash \
#    && source ${DN_DEV_WORKSPACE}/install/setup.bash \
#    && printenv | grep -e AR_ -e ROS -e MASTER -e HOSTNAME -e DS_ -e DN_ # WE ARE HERE <-- (!)

CMD [ "bash" ]



