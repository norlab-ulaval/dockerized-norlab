
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
#ARG TAG_OS_VERSION

FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS dependencies

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

ARG PROJECT_PROMPT_NAME
ENV PROJECT_PROMPT_NAME=${PROJECT_PROMPT_NAME:-Dockerized-NorLab}

# (NICE TO HAVE) ToDo: assessment >> is it still usefull inside containers (note: DN_PROMPT_NAME is used by the DN build system scripts)
#ARG DN_PROMPT_NAME
#ENV DN_PROMPT_NAME=${DN_PROMPT_NAME:?err}

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

# ====Begin Dockerized-NorLab======================================================================

# ....Setup timezone and localization..............................................................
# change the locale from POSIX to UTF-8
RUN apt-get update && \
    apt-get install --assume-yes --no-install-recommends \
        locales \
    && rm -rf /var/lib/apt/lists/* \
    && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# ....install development utilities................................................................
RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        apt-utils \
        lsb-release \
        cmake \
        build-essential \
        curl \
        wget \
        gnupg2 \
        ca-certificates \
        git \
        libusb-dev \
        usbutils \
        iputils-ping \
        bash-completion \
        python3-argcomplete \
        vim \
        tree \
        zip gzip tar unzip \
        rsync \
        clang \
        gdb \
        gdbserver \
        tmux \
        screen \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip3 install --no-cache-dir  --upgrade pip  \
    && echo ". . install python general packages. . . . . . . . . . . . . . . . . . . . . . . . " \
    && pip3 install --no-cache-dir \
        setuptools \
        wheel \
        build \
        psutil \
        tqdm \
        rich \
        python-dotenv \
    && echo ". . install python general development packages. . . . . . . . . . . . . . . . . . ." \
    && pip3 install --no-cache-dir \
        pyyaml \
        termcolor \
        decorator \
        black[d] \
    && echo "# . . Type check. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ." \
    && pip3 install --no-cache-dir \
        pytype \
        mypy \
    && echo "# . . Testing tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ." \
        && pip3 install --no-cache-dir \
        pytest \
        pytest-benchmark \
        mock \
        pytest-mock \
        pytest-env \
        pytest-instafail \
        pytest-xdist \
        pytest-dotenv \
    && pip3 install --no-cache-dir --ignore-installed  \
           pybind11

# (CRITICAL) ToDo: test using pytest-dotenv in pycharm (ref task NMO-360 ﹅→ Fix the ROS environment variable not loaded in PyCharm pytest run nightmare)
# https://github.com/quiqua/pytest-dotenv
# How to get PyCharm test run working with pytest-dotenv?:  https://github.com/quiqua/pytest-dotenv/issues/10

# ....X11 forwarding dev tools.....................................................................
# ref https://gist.github.com/sorny/969fe55d85c9b0035b0109a31cbcb088
# Note: Test X11 forwarding config by executing the following command in the container:
#         $ xclock -analog      or   $ xclock -digital
#       The xclock should be displayed on your local computer in macOS XQuartz app.
#       To test X11 forwarding with OpenGL, run in the container
#         $ glxgears
#       The animated gears should be displayed on your local computer in macOS XQuartz app.
RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
      x11-apps \
    && rm -rf /var/lib/apt/lists/*

# ===Setup submodule===============================================================================
WORKDIR /dockerized-norlab
COPY --from=context-dn-root ./.git ./.git

# ....Install norlab-shell-script-tool and norlab-build-system tools...............................
WORKDIR /dockerized-norlab/utilities/norlab-shell-script-tools
COPY --from=context-dn-submodules ./norlab-shell-script-tools/ .

# ....Add dn-container tools.......................................................................
WORKDIR /dockerized-norlab/dockerized-norlab-images/container-tools
COPY --from=context-dn-container-tools . .

RUN echo "Create soft link in the root dir" \
    && ln -s $(pwd)/import_dockerized_norlab_container_tools.bash /import_dockerized_norlab_container_tools.bash

WORKDIR /dockerized-norlab

RUN ( \
      echo ""; \
      echo "# >>> dockerized-norlab aliases (from dependencies img)"; \
      echo "source /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bash_alias.bash"; \
      echo ""; \
    ) >> ~/.bashrc

RUN echo "Sanity check (dn-container tools)" \
    && source /import_dockerized_norlab_container_tools.bash \
    && n2st::set_which_python3_version || exit 1 \
    && echo "PYTHON3_VERSION=${PYTHON3_VERSION:?'Error: env variable PYTHON3_VERSION was not exported by script which_python_version.bash'}" \
    && echo  \
    && echo "Sanity check (container-tools directory copy)" \
    && bash /dockerized-norlab/dockerized-norlab-images/container-tools/dn_info.bash

CMD [ "bash" ]
