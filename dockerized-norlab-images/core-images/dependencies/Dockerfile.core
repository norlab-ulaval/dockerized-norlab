
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
ARG DEBIAN_FRONTEND=noninteractive

FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS dependencies

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

ARG PROJECT_PROMPT_NAME
ENV PROJECT_PROMPT_NAME=${PROJECT_PROMPT_NAME:-Dockerized-NorLab}

# (NICE TO HAVE) ToDo: assessment >> is it still usefull inside containers (note: DN_PROMPT_NAME is used by the DN build system scripts)
#ARG DN_PROMPT_NAME
#ENV DN_PROMPT_NAME=${DN_PROMPT_NAME:?err}

SHELL ["/bin/bash", "-c"]

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

# ====Begin Dockerized-NorLab======================================================================

# ....Setup timezone and localization..............................................................
# change the locale from POSIX to UTF-8
RUN <<EOF
    apt-get update
    apt-get install --assume-yes --no-install-recommends locales
    rm -rf /var/lib/apt/lists/*
    locale-gen en_US en_US.UTF-8
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
EOF

ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# ....install development utilities................................................................
RUN <<EOF
    apt-get update \
    apt-get install --assume-yes --no-install-recommends \
        apt-utils \
        lsb-release \
        cmake \
        build-essential \
        curl \
        wget \
        gnupg2 \
        ca-certificates \
        git \
        libusb-dev \
        usbutils \
        iputils-ping \
        bash-completion \
        python3-argcomplete \
        vim \
        tree \
        zip gzip tar unzip \
        rsync \
        clang \
        gdb \
        gdbserver \
        tmux \
        screen
    apt-get clean
    rm -rf /var/lib/apt/lists/*

    # ....install python general packages..............................................................
    pip3 install --no-cache-dir --upgrade pip

    pip3 install --no-cache-dir \
        setuptools \
        wheel \
        build \
        psutil \
        tqdm \
        rich \
        python-dotenv

    # ....install python general development packages..................................................
    pip3 install --no-cache-dir \
        pyyaml \
        termcolor \
        decorator \
        black[d]

    # ....Type check...................................................................................
    pip3 install --no-cache-dir \
        pytype \
        mypy

    # ....Testing tools ...............................................................................
    pip3 install --no-cache-dir \
        pytest \
        pytest-benchmark \
        mock \
        pytest-mock \
        pytest-env \
        pytest-instafail \
        pytest-xdist \
        pytest-dotenv

    pip3 install --no-cache-dir --ignore-installed \
       pybind11


    # (CRITICAL) ToDo: test using pytest-dotenv in pycharm (ref task NMO-360 ﹅→ Fix the ROS environment variable not loaded in PyCharm pytest run nightmare)
    # https://github.com/quiqua/pytest-dotenv
    # How to get PyCharm test run working with pytest-dotenv?:  https://github.com/quiqua/pytest-dotenv/issues/10

    # ....X11 forwarding dev tools.................................................................
    # ref https://gist.github.com/sorny/969fe55d85c9b0035b0109a31cbcb088
    # Note: Test X11 forwarding config by executing the following command in the container:
    #         $ xclock -analog      or   $ xclock -digital
    #       The xclock should be displayed on your local computer in macOS XQuartz app.
    #       To test X11 forwarding with OpenGL, run in the container
    #         $ glxgears
    #       The animated gears should be displayed on your local computer in macOS XQuartz app.

    apt-get update
    apt-get install --assume-yes --no-install-recommends \
          x11-apps
    rm -rf /var/lib/apt/lists/*
EOF

# ===Setup submodule===============================================================================
WORKDIR /dockerized-norlab
COPY --from=context-dn-root ./.git ./.git

# ....Install norlab-shell-script-tool and norlab-build-system tools...............................
COPY --from=context-dn-submodules ./norlab-shell-script-tools/ ./utilities/norlab-shell-script-tools

# ....Add dn-container tools.......................................................................
COPY --from=context-dn-container-tools . ./dockerized-norlab-images/container-tools

RUN <<EOF
    echo "Create soft link in the root dir"
    ln -s /dockerized-norlab/dockerized-norlab-images/container-tools/import_dockerized_norlab_container_tools.bash /import_dockerized_norlab_container_tools.bash
    test -f /import_dockerized_norlab_container_tools.bash || exit 1

    (
        echo ""
        echo "# >>> dockerized-norlab dependencies core"
        echo "# Dockerized-norlab aliases"
        echo "source /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bash_alias.bash"
        echo "# <<< dockerized-norlab dependencies core"
        echo ""
    ) >> /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash

    (
        echo ""
        echo "# >>> dockerized-norlab dependencies core"
        echo "source /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash"
        echo "# <<< dockerized-norlab dependencies core"
    echo ""
    ) >> ${HOME}/.bashrc
EOF

# Source ROS in non-interactive non-login shell
# Note:
#   - Unset BASH_ENV to disable non-interactive execution
#   - Value of the PATH variable is not used to search for the file name
ENV BASH_ENV=/dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc_non_interactive.bash


FROM dependencies AS test

# Note: DN container-tools library should be sourced automaticaly via our dn_bashrc_non_interactive.bash setup
RUN <<EOF
    echo "(dn-container tools) Non-interactive shell sanity check. Validate dn_bashrc_non_interactive.bash logic"
    {
        # Check if import_dockerized_norlab_container_tools.bash was executed
        test "$(type -t n2st::set_which_python3_version)" == "function" && \
        n2st::set_which_python3_version && \
        test -n "${PYTHON3_VERSION:?'Error: env variable PYTHON3_VERSION was not exported by script which_python_version.bash'}" ;
    } || { echo "Failed non-interactive shell sanity check" ; exit 1 ; }

    echo "(container-tools directory copy) Sanity check"
    {
        test -f /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash && \
        test -f /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc_non_interactive.bash && \
        test -f /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bash_alias.bash ;
    } || exit 1
EOF

# Note: DN container-tools library should be sourced automaticaly via our dn_bashrc.bash setup
SHELL ["/bin/bash", "-i", "-c"]
RUN <<EOF
    echo "(dn-container tools) Interactive shell sanity check. Validate dn_bashrc.bash logic"
    {
        # Check if import_dockerized_norlab_container_tools.bash was executed
        test "$(type -t n2st::set_which_python3_version)" == "function" && \
        n2st::set_which_python3_version && \
        test -n "${PYTHON3_VERSION:?'Error: env variable PYTHON3_VERSION was not exported by script which_python_version.bash'}" ;
    } || { echo "Failed non-interactive shell sanity check" ; exit 1 ; }
EOF

FROM dependencies AS final

# ....TMP DEV introspection........................................................................
## (CRITICAL) ToDo: on task end >> mute next bloc ↓↓
#RUN <<EOF
#    # TMP DEV introspection
#    cat /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bashrc.bash
#    echo
#    #cat ${HOME}/.bashrc
#    echo "${0}:not implemented error" && exit 1
#EOF
# ........................................................................TMP DEV introspection....
