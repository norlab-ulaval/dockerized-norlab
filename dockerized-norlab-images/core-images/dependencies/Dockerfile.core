
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
ARG TAG_VERSION

FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS base-image

# ===Remove Jetson-container unused install========================================================
RUN rm --recursive --force /ros_deep_learning \
  && rm --recursive --force /jetson-inference

# (CRITICAL) ToDo: validate using l4t-base instead of l4t-jetson <-- we are here
#FROM nvcr.io/nvidia/l4t-jetpack:${TAG_VERSION:?err} AS squash-base-image
#FROM nvcr.io/nvidia/l4t-base:${TAG_VERSION:?err} AS squash-base-image
#FROM docker.io/arm64v8/ubuntu:20.04 AS squash-base-image
FROM scratch AS squash-base-image
COPY --from=base-image / /
# Note:
#   - The squash-base-image stage is a workaround to prevent the "max depth exceeded" error
#        occuring when the maximum number of docker layer as been reached.
#   - We use arm64v8/ubuntu:20.04 as base image since we are copying everything from l4t-jetpack anyway
#   - About nvidia l4t  base images:
#       - nvcr.io/nvidia/l4t-base install the core CUDA ressources
#       - nvcr.io/nvidia/l4t-jetpack
#           - install several dev package such as nvidia-cuda-dev, nvidia-cudnn-dev and nvidia-tensorrt-dev
#           - mod their dockerfile to install runtime version of all those packages
#   - copying ROS ressources is relatively easy, however copying ressources installed
#       via pip vs apt-get or via source installed or pytorch related is a nightmare.
#       Work around for minimizing maintenance: copy everything
# Ref:
#   - https://gitlab.com/nvidia/container-images/l4t-base
#   - https://gitlab.com/nvidia/container-images/l4t-jetpack
#   - https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-base
#   - https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-jetpack

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

# ....Redefine environment variable from base-image build stage....................................
ARG PATH
ARG LD_LIBRARY_PATH
ARG ROS_DISTRO
ARG ROS_ROOT
ARG ROS_PYTHON_VERSION
ARG RMW_IMPLEMENTATION

ENV PATH=${PATH:?'Environment variable was not passed from base-image build stage'}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH:?'Environment variable was not passed from base-image build stage'}
ENV ROS_DISTRO=${ROS_DISTRO:?'Environment variable was not passed from base-image build stage'}
ENV ROS_ROOT=${ROS_ROOT:?'Environment variable was not passed from base-image build stage'}
ENV ROS_PYTHON_VERSION=${ROS_PYTHON_VERSION:?'Environment variable was not passed from base-image build stage'}
ENV RMW_IMPLEMENTATION=${RMW_IMPLEMENTATION:?'Environment variable was not passed from base-image build stage'}

# ....The following env var does not appear in every jetson-container ros base images............
# LD_PRELOAD is for pytorch images and OPENBLAS_CORETYPE is for ROS images
ARG LD_PRELOAD
ARG OPENBLAS_CORETYPE

ENV LD_PRELOAD=${LD_PRELOAD}
ENV OPENBLAS_CORETYPE=${OPENBLAS_CORETYPE}


## ....copy artifact from base-image................................................................
## Note: copying ROS ressources is relatively easy, however copying ressources installed
##       via pip vs apt-get or via source installed or pytorch related is a nightmare.
##       Work around for minimizing maintenance: copy everything
#COPY --from=base-image /lib /lib
#COPY --from=base-image /etc /etc
#COPY --from=base-image /usr /usr
#COPY --from=base-image /bin /bin
#COPY --from=base-image /var /var
#COPY --from=base-image /opt /opt
#COPY --from=base-image ${ROS_ROOT} ${ROS_ROOT}


FROM squash-base-image AS squashed-base-image-tester

#RUN python -c "import torch" \
#    && python -c "import torchvision" \
#    && python -c "import numpy" \
#    && python -c "import Cython"

# Only test that the ros install from jetson-container was transfered ok between build-stages
RUN python -c "import numpy" \
    && python -c "import pytest"

RUN echo "sourcing /opt/ros/${ROS_DISTRO}/install/setup.bash" \
    && source /opt/ros/${ROS_DISTRO}/install/setup.bash \
    && echo "Sanity check" \
    && echo ${ROS_VERSION:?'Build argument needs to be set and non-empty.'} \
    && echo ${AMENT_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo ${CMAKE_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo ${COLCON_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo ${PYTHONPATH:?'Build argument needs to be set and non-empty.'} \
    && python -c "import rclpy" \
    && ros2 pkg list


# ====Begin Dockerized-NorLab======================================================================
FROM squash-base-image AS core-dependencies

# ....Setup timezone and localization..............................................................
# change the locale from POSIX to UTF-8
RUN apt-get update && \
    apt-get install --assume-yes --no-install-recommends \
        locales \
    && rm -rf /var/lib/apt/lists/* \
    && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# ....install development utilities................................................................
RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        apt-utils \
        lsb-release \
        cmake \
        build-essential \
        curl \
        wget \
        gnupg2 \
        ca-certificates \
        git \
        libusb-dev \
        usbutils \
        bash-completion \
        python3-argcomplete \
        vim \
        tree \
        zip gzip tar unzip \
        rsync \
        cmake \
        clang \
        gdb \
        gdbserver \
        tmux \
        screen \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip3 install --no-cache-dir --verbose --upgrade pip  \
    && pip3 install --no-cache-dir --verbose  \
        setuptools \
        wheel \
        build \
        psutil \
        tqdm \
        rich \
        python-dotenv \
        # . . install python general development package. . . . . . . . . . . . . . . . . . . . . .
        pyyaml \
        termcolor \
        decorator \
        black[d] \
        # . . Type check. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
        pytype \
        mypy \
        # . . Testing tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
        pytest \
        pytest-benchmark \
        mock \
        pytest-mock \
        pytest-env \
        pytest-instafail \
        pytest-xdist \
        # (CRITICAL) ToDo: test using pytest-dotenv in pycharm (ref task NMO-360 ﹅→ Fix the ROS environment variable not loaded in PyCharm pytest run nightmare)
        # https://github.com/quiqua/pytest-dotenv
        # How to get PyCharm test run working with pytest-dotenv?:  https://github.com/quiqua/pytest-dotenv/issues/10
        pytest-dotenv \
    && pip3 install --no-cache-dir --ignore-installed  \
           pybind11



## Packages for older python version
#RUN pip3 install --no-cache-dir --verbose  \
#            dataclasses


# ===Final build step==============================================================================
FROM core-dependencies AS final

# ....Install norlab-shell-script-tool.............................................................
WORKDIR /dockerized-norlab

RUN git clone https://github.com/norlab-ulaval/norlab-shell-script-tools.git ./utilities/norlab-shell-script-tools/ \
    && echo "Sanity check"  \
    && cd ./utilities/norlab-shell-script-tools/src/utility_scripts \
    && source ./which_python_version.bash \
    && echo "PYTHON3_VERSION=${PYTHON3_VERSION:?'Error: env variable PYTHON3_VERSION was not exported by script which_python_version.bash'}"

# ....Add dn-container tools.......................................................................
# ToDo: move this step at a later stage
WORKDIR /dockerized-norlab
COPY --from=context-dn-container-tools ./dn_info.bash ./dockerized-norlab-images/container-tools/

RUN ( \
      echo ""; \
      echo "# >>> dockerized-norlab aliases (from dependencies img)"; \
      echo "alias tree='pwd && tree -L 1'"; \
      echo "alias tree2='tree -L 2'"; \
      echo "alias dn_info='source /dockerized-norlab/dockerized-norlab-images/container-tools/dn_info.bash'"; \
    ) >> ~/.bashrc \
    && bash /dockerized-norlab/dockerized-norlab-images/container-tools/dn_info.bash

CMD [ "bash" ]
