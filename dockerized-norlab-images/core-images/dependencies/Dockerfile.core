
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS dependencies

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

ARG PROJECT_PROMPT_NAME
ENV PROJECT_PROMPT_NAME=${PROJECT_PROMPT_NAME:-Dockerized-NorLab}

# (NICE TO HAVE) ToDo: assessment >> is it still usefull inside containers (note: DN_PROMPT_NAME is used by the DN build system scripts)
#ARG DN_PROMPT_NAME
#ENV DN_PROMPT_NAME=${DN_PROMPT_NAME:?err}

# ★ Note: is reset on the project-develop, project-deploy last stage
ENV DEBIAN_FRONTEND=noninteractive
ENV PIP_ROOT_USER_ACTION=ignore

SHELL ["/bin/bash", "-c"]

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

ENV PYTHONIOENCODING=utf-8

# ====Begin Dockerized-NorLab======================================================================

# ....Setup timezone and localization..............................................................

ENV LANGUAGE=en_US:en \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8

# change the locale from POSIX to UTF-8
RUN <<EOF
    apt-get update
    apt-get install --assume-yes --no-install-recommends locales

    locale-gen en_US en_US.UTF-8
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

    # ....install development utilities............................................................
    apt-get update || exit 1
    apt-get install --assume-yes --no-install-recommends \
        apt-utils \
        lsb-release \
        cmake \
        build-essential \
        curl \
        wget \
        gnupg2 \
        ca-certificates \
        git \
        libusb-dev \
        usbutils \
        iputils-ping \
        bash-completion \
        python3-argcomplete \
        vim \
        tree \
        zip gzip tar unzip \
        rsync \
        clang \
        gdb \
        gdbserver \
        tmux \
        screen \
      || exit 1


    # ....install python general packages..............................................................
    pip3 install --no-cache-dir --upgrade pip

    pip3 install --no-cache-dir \
        setuptools \
        wheel \
        build \
        psutil \
        tqdm \
        rich \
        python-dotenv \
      || exit 1

    # ....install python general development packages..................................................
    pip3 install --no-cache-dir \
        pyyaml \
        termcolor \
        decorator \
        black[d] \
      || exit 1

    # ....Type check...................................................................................
    pip3 install --no-cache-dir \
        pytype \
        mypy \
      || exit 1

    # ....Testing tools ...............................................................................
    pip3 install --no-cache-dir \
        pytest \
        pytest-benchmark \
        mock \
        pytest-mock \
        pytest-env \
        pytest-instafail \
        pytest-xdist \
        pytest-dotenv \
      || exit 1

    pip3 install --no-cache-dir --ignore-installed \
        pybind11 \
      || exit 1


    # (CRITICAL) ToDo: test using pytest-dotenv in pycharm (ref task NMO-360 ﹅→ Fix the ROS environment variable not loaded in PyCharm pytest run nightmare)
    # https://github.com/quiqua/pytest-dotenv
    # How to get PyCharm test run working with pytest-dotenv?:  https://github.com/quiqua/pytest-dotenv/issues/10

    # ....X11 forwarding dev tools.................................................................
    # ref https://gist.github.com/sorny/969fe55d85c9b0035b0109a31cbcb088
    # Note: Test X11 forwarding config by executing the following command in the container:
    #         $ xclock -analog      or   $ xclock -digital
    #       The xclock should be displayed on your local computer in macOS XQuartz app.
    #       To test X11 forwarding with OpenGL, run in the container
    #         $ glxgears
    #       The animated gears should be displayed on your local computer in macOS XQuartz app.
    apt-get install --assume-yes --no-install-recommends \
        x11-apps \
      || exit 1

    # ....Teardown.................................................................................
    apt-get autoremove --assume-yes
    apt-get clean
    rm -rf /var/lib/apt/lists/*
EOF

# ====Setup submodule and DN container-tools=======================================================
WORKDIR /dockerized-norlab
COPY --from=context-dn-root ./.git ./.git

# ....Install norlab-shell-script-tool and norlab-build-system tools...............................
COPY --from=context-dn-submodules ./norlab-shell-script-tools/ ./utilities/norlab-shell-script-tools

# ....Add dn-container tools.......................................................................

COPY --from=context-dn-container-tools . ./dockerized-norlab-images/container-tools

RUN <<EOF
    echo "Create soft link in the root dir..."
    ln -s /dockerized-norlab/dockerized-norlab-images/container-tools/import_dockerized_norlab_container_tools.bash /import_dockerized_norlab_container_tools.bash
    test -f /import_dockerized_norlab_container_tools.bash || exit 1

    echo "Setup ${HOME} interactive shell..."
    # Which should be ROOT
    (
        echo
        echo "# >>> dockerized-norlab dependencies core"
        echo "source /dockerized-norlab/dockerized-norlab-images/container-tools/bash_run_config/.bashrc.dn"
        echo "# <<< dockerized-norlab dependencies core"
        echo
    ) >> ${HOME}/.bashrc
EOF

# ....Setup bash wrapper...........................................................................
COPY --from=context-dn-container-tools ./bash_wrapper/bash-dn-buildtime /usr/local/bin/bash-dn-buildtime
COPY --from=context-dn-container-tools ./bash_wrapper/bash-dn-ssh-user /usr/local/bin/bash-dn-ssh-user

RUN <<EOF
    echo "Configure bash wrappers..."
    chmod +x /usr/local/bin/bash-dn-buildtime
    chmod +x /usr/local/bin/bash-dn-ssh-user

    echo
    echo "Activate DN build time non-interactive shell: /bin/bash -> /usr/local/bin/bash-dn-buildtime ..."
EOF
SHELL ["/usr/local/bin/bash-dn-buildtime", "-c"]


FROM dependencies AS test

# ....Build time tests.............................................................................
# Note: DN container-tools library should be sourced automaticaly via our .bashrc.dn_non_interactive setup
RUN <<EOF
    echo "(dn-container tools) Non-interactive shell sanity check. Validate .bashrc.dn_non_interactive logic..."

    echo "Check if import_dockerized_norlab_container_tools.bash was executed..."
    {
        test -n "${DN_CONTAINER_TOOLS_LOADED:?'Env variable DN_CONTAINER_TOOLS_LOADED is not set'}" && \
        test -n "$( declare -f n2st::print_msg )" ;
    } || { echo "Failed non-interactive shell sanity check" ; exit 1 ; }

    echo "(container-tools directory copy) Sanity check..."
    {
        test -f /dockerized-norlab/dockerized-norlab-images/container-tools/bash_run_config/.bashrc.dn && \
        test -f /dockerized-norlab/dockerized-norlab-images/container-tools/bash_run_config/.bashrc.dn_non_interactive && \
        test -f /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bash_alias.bash ;
    } || { echo "(container-tools directory copy) Sanity check failed" ; exit 1 ; }

    echo "(dn-container tools) Non-interactive shell sanity check. ok."
EOF

# ....Run time tests...............................................................................
# Note: DN container-tools library should be sourced automaticaly via our .bashrc.dn setup
SHELL ["/bin/bash", "-i", "-c"]
RUN <<EOF
    echo "(dn-container tools) Interactive shell sanity check. Validate .bashrc.dn logic..."

    echo "Check if import_dockerized_norlab_container_tools.bash was executed..."
    {
        test -n "${DN_CONTAINER_TOOLS_LOADED:?'Env variable DN_CONTAINER_TOOLS_LOADED is not set'}" && \
        test -n "$( declare -f n2st::print_msg )" ;
    } || { echo "Failed non-interactive shell sanity check" ; exit 1 ; }

    {
        test -n "${DN_CONTAINER_TOOLS_LOADED:?'Env variable DN_CONTAINER_TOOLS_LOADED is not set'}" && \
        test "$(type -t n2st::set_which_python3_version)" == "function" && \
        n2st::set_which_python3_version && \
        test -n "${PYTHON3_VERSION:?'Error: env variable PYTHON3_VERSION was not exported by script which_python_version.bash'}" ;
    } || { echo "Failed interactive shell sanity check" ; exit 1 ; }

    echo "(dn-container tools) interactive shell sanity check. ok."
EOF

FROM dependencies AS final

