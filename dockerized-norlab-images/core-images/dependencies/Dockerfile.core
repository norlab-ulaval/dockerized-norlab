
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
#ARG TAG_VERSION

FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS dependencies

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

# ====Begin Dockerized-NorLab======================================================================

# ....Setup timezone and localization..............................................................
# change the locale from POSIX to UTF-8
RUN apt-get update && \
    apt-get install --assume-yes --no-install-recommends \
        locales \
    && rm -rf /var/lib/apt/lists/* \
    && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# ....install development utilities................................................................
RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        apt-utils \
        lsb-release \
        cmake \
        build-essential \
        curl \
        wget \
        gnupg2 \
        ca-certificates \
        git \
        libusb-dev \
        usbutils \
        bash-completion \
        python3-argcomplete \
        vim \
        tree \
        zip gzip tar unzip \
        rsync \
        clang \
        gdb \
        gdbserver \
        tmux \
        screen \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip3 install --no-cache-dir  --upgrade pip  \
    && echo ". . install python general packages. . . . . . . . . . . . . . . . . . . . . . . . " \
    && pip3 install --no-cache-dir \
        setuptools \
        wheel \
        build \
        psutil \
        tqdm \
        rich \
        python-dotenv \
    && echo ". . install python general development packages. . . . . . . . . . . . . . . . . . ." \
    && pip3 install --no-cache-dir \
        pyyaml \
        termcolor \
        decorator \
        black[d] \
    && echo "# . . Type check. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ." \
    && pip3 install --no-cache-dir \
        pytype \
        mypy \
    && echo "# . . Testing tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ." \
        && pip3 install --no-cache-dir \
        pytest \
        pytest-benchmark \
        mock \
        pytest-mock \
        pytest-env \
        pytest-instafail \
        pytest-xdist \
        pytest-dotenv \
    && pip3 install --no-cache-dir --ignore-installed  \
           pybind11

# (CRITICAL) ToDo: test using pytest-dotenv in pycharm (ref task NMO-360 ﹅→ Fix the ROS environment variable not loaded in PyCharm pytest run nightmare)
# https://github.com/quiqua/pytest-dotenv
# How to get PyCharm test run working with pytest-dotenv?:  https://github.com/quiqua/pytest-dotenv/issues/10


## Packages for older python version
#RUN pip3 install --no-cache-dir   \
#            dataclasses


# ===Setup submodule===============================================================================
WORKDIR /dockerized-norlab
COPY --from=context-dn-root ./.git ./.git

# ....Install norlab-shell-script-tool and norlab-build-system tools...............................
WORKDIR /dockerized-norlab/utilities/norlab-shell-script-tools
COPY --from=context-dn-submodules ./norlab-shell-script-tools/ .

WORKDIR /dockerized-norlab/dockerized-norlab-images/container-tools
COPY --from=context-dn-container-tools . .

RUN source import_dockerized_norlab_container_tools.bash \
    && echo "Sanity check" \
    && n2st::set_which_python3_version \
    && echo "PYTHON3_VERSION=${PYTHON3_VERSION:?'Error: env variable PYTHON3_VERSION was not exported by script which_python_version.bash'}"


# ....Add dn-container tools.......................................................................
# ToDo: assessement › move this step at a later stage

#WORKDIR /dockerized-norlab/dockerized-norlab-images/container-tools
#COPY --from=context-dn-container-tools ./dn_info.bash ./
#COPY --from=context-dn-container-tools ./dn_bash_alias.bash ./

#RUN ( \
#      echo ""; \
#      echo "# >>> dockerized-norlab aliases (from dependencies img)"; \
#      echo "alias tree='pwd && tree -L 1'"; \
#      echo "alias tree2='tree -L 2'"; \
#      echo "alias dn_info='source /dockerized-norlab/dockerized-norlab-images/container-tools/dn_info.bash'"; \
#    ) >> ~/.bashrc \
#    && echo "" \
#    && bash /dockerized-norlab/dockerized-norlab-images/container-tools/dn_info.bash

WORKDIR /dockerized-norlab

RUN ( \
      echo ""; \
      echo "# >>> dockerized-norlab aliases (from dependencies img)"; \
      echo "source /dockerized-norlab/dockerized-norlab-images/container-tools/dn_bash_alias.bash"; \
      echo ""; \
    ) >> ~/.bashrc \
    && echo  \
    && echo "Sanity check" \
    && bash /dockerized-norlab/dockerized-norlab-images/container-tools/dn_info.bash

CMD [ "bash" ]
