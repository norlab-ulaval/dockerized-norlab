
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS base-image

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}


# ====Begin=========================================================================================

# ....Setup timezone and localization...............................................................
# change the locale from POSIX to UTF-8
RUN apt-get update && \
    apt-get install --assume-yes --no-install-recommends \
        locales \
    && rm -rf /var/lib/apt/lists/* \
    && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# ....install development utilities.................................................................
RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        apt-utils \
        lsb-release \
        cmake \
        build-essential \
        curl \
        wget \
        gnupg2 \
        ca-certificates \
        git \
        libusb-dev \
        usbutils \
        bash-completion \
        python3-argcomplete \
        vim \
        tree \
        zip gzip tar unzip \
        rsync \
        cmake \
        clang \
        gdb \
        gdbserver \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip3 install --no-cache-dir --verbose --upgrade pip  \
    && pip3 install --no-cache-dir --verbose  \
        setuptools \
        wheel \
        build \
        psutil \
        tqdm \
        rich \
        # . . install python general development package . . . . . . . . . . . .
        pyyaml \
        termcolor \
        decorator \
        black[d] \
        # . . Type check. . . . . . . . . . . . . . . . . . . . . . . . . . . .
        pytype \
        mypy \
        # . . Testing tools . . . . . . . . . . . . . . . . . . . . . . . . . .
        pytest \
        pytest-benchmark \
        pytest-mock \
        python-dotenv \
        pytest-env \
        mock \
        pytest-instafail \
        pytest-xdist \
    && pip3 install --no-cache-dir --ignore-installed  \
           pybind11


## Packages for older python version
#RUN pip3 install --no-cache-dir --verbose  \
#            dataclasses


# ===Final build step===============================================================================
FROM base-image AS final

# ....Install norlab-shell-script-tool.............................................................
WORKDIR /dockerized-norlab

RUN git clone https://github.com/norlab-ulaval/norlab-shell-script-tools.git ./utilities/norlab-shell-script-tools/ \
    && echo "Sanity check"  \
    && cd ./utilities/norlab-shell-script-tools/src/utility_scripts \
    && source ./which_python_version.bash \
    && echo "PYTHON3_VERSION=${PYTHON3_VERSION:?'Error: env variable PYTHON3_VERSION was not exported by script which_python_version.bash'}"

# ....Add dn-container tools........................................................................
# ToDo: move this step at a later stage
WORKDIR /dockerized-norlab
COPY --from=context-dn-container-tools ./dn_info.bash ./dockerized-norlab-images/container-tools/

RUN ( \
      echo ""; \
      echo "# >>> dockerized-norlab aliases (from dependencies img)"; \
      echo "alias dn_info='bash /dockerized-norlab/dockerized-norlab-images/container-tools/dn_info.bash'"; \
    ) >> ~/.bashrc \
    && bash /dockerized-norlab/dockerized-norlab-images/container-tools/dn_info.bash

CMD [ "bash" ]
