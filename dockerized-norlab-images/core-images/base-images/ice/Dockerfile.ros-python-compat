
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG

FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS base-image
#FROM docker.io/arm64v8/ubuntu:20.04 AS squash-base-image

ARG TARGETPLATFORM
# Note: see https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope
#       for docker buildx environment variables available inside the container: i.e. [TARGET|BUILD]PLATFORM
RUN echo "Dockerized-NorLab build system › image for target device: ${TARGETPLATFORM:?'Buildx environment variables not available in container'}"

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

SHELL ["/bin/bash", "-c"]


ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

# ====Begin========================================================================================

#RUN echo "Record current list of pip pkg" \
#    && touch /tmp/requirements.ros-python-compat.txt \
#    && pip freeze > /tmp/requirements.ros-python-compat.txt

# ....Make python 3 default........................................................................
RUN if [[ $(which python) =~ "/opt/conda".* ]]; then \
          apt-get update \
          && apt-get install --assume-yes --no-install-recommends \
              python3-dev \
              python3-pip \
          && rm -rf /var/lib/apt/lists/* \
          && apt-get clean ; \
    fi


# Note: strip 'conda' from "PATH=/opt/conda/condabin:/usr/local/nvm/versions/node/v15.2.1/bin:/opt/conda/bin:/opt/cmake-3.14.6-Linux-x86_64/bin/..."
#       using $ echo PATH=$(echo ${OLD_PATH} | sed -E 's+/opt/conda/[^:]*:++g' )
#       or keep conda in path and simply prepend the system python path to the front
ARG PATH="/usr/bin:${PATH}"
ENV PATH=${PATH}

# Note:
# $ printenv | grep -i -e conda
# CONDA_EXE=/opt/conda/bin/conda
# _CE_CONDA=
# CONDA_SHLVL=0
# CONDA_PYTHON_EXE=/opt/conda/bin/python

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \
    && update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 \
    && python3 -m pip install --upgrade pip

#RUN echo "Reinstall python pckg in system python environment"  \
#    && more /tmp/requirements.ros-python-compat.txt \
#    && pip install -r /tmp/requirements.ros-python-compat.txt

## ....Rebuild PyTorch as per nvidia/pytorch base image instructions................................
#WORKDIR /opt/pytorch
#RUN cd pytorch && \
#    CUDA_HOME="/usr/local/cuda" \
#    CMAKE_PREFIX_PATH="$(dirname $(which conda))/../" \
#    NCCL_INCLUDE_DIR="/usr/include/" \
#    NCCL_LIB_DIR="/usr/lib/" \
#    USE_SYSTEM_NCCL=1 \
#    USE_OPENCV=1 \
#    pip install --no-cache-dir -v .

FROM base-image AS base-image-tester

RUN PYTHON_VERSION=$(python --version) \
    && echo -e "Current python version: ${PYTHON_VERSION}" \
    && echo -e "          which python: $(which python)" \
    && echo -e "        whereis python: $(whereis python)" \
    && if [[ ! ${PYTHON_VERSION} =~ "Python 3.".* ]]; then \
      echo "Need python 3" && exit 1 ; \
    fi &&  \
    if [[ $(which python) != "/usr/bin/python" ]] || [[ $(which python) == "/opt/conda/bin/python" ]]; then \
        echo -e "ROS2 does not behave well with conda python environment, make sure the default python is either the system python or a virtual environment" \
        && echo -e "Ref https://docs.ros.org/en/rolling/How-To-Guides/Installation-Troubleshooting.html#anaconda-python-conflict" \
        && exit 1 ; \
    fi

RUN echo "Check CUDA installed version" \
    && nvcc --version | grep "release" | awk '{print $6}' | cut -c2-


FROM base-image AS final

ARG TARGETPLATFORM

# Note: see https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope
#       for docker buildx environment variables available inside the container: i.e. [TARGET|BUILD]PLATFORM
RUN echo "$(printenv | grep -i -e TARGET -e BUILD)" \
    && echo "Dockerized-NorLab build system › image for target device: ${TARGETPLATFORM}" || exit 1

# unset entrypoint for running test stage
ENTRYPOINT [ "exec", "$@" ]
#ENTRYPOINT [ "/usr/local/bin/nvidia_entrypoint.sh" ]
CMD [ "bash" ]
