
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG

FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS ros2-install

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

ARG ROS_DISTRO
ARG ROS_PKG
ENV ROS_DISTRO=${ROS_DISTRO:?'Environment variable not set'}
ENV ROS_PKG=${ROS_PKG:?'Environment variable not set'}
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PYTHON_VERSION=3

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

ARG DN_DEV_WORKSPACE_DIR
ENV DN_DEV_WORKSPACE="${HOME}/${DN_DEV_WORKSPACE_DIR:-ros2_ws}"

# ====Begin Dockerized-NorLab======================================================================

# ....Setup timezone and localization..............................................................
# change the locale from POSIX to UTF-8
RUN apt-get update && \
    apt-get install --assume-yes --no-install-recommends \
        locales \
    && rm -rf /var/lib/apt/lists/* \
    && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# ....Install ROS2.................................................................................
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN <<EOF

    # ....Distro compatibility check...............................................................
    UBUNTU_DISTRO_NAME="$( source /etc/lsb-release && echo ${DISTRIB_CODENAME})"
    UBUNTU_DISTRO_RELEASE="$( source /etc/lsb-release && echo ${DISTRIB_RELEASE})"
    n2st::print_msg "Ubuntu version is ${UBUNTU_DISTRO_NAME}"

    if [[ "${UBUNTU_DISTRO_RELEASE}" == "20.04" ]] && [[ "${ROS_DISTRO}" =~ ^(foxy|galactic)$ ]] ; then
      :
    elif [[ "${UBUNTU_DISTRO_RELEASE}" == "22.04" ]] && [[ "${ROS_DISTRO}"  =~ ^(humble|iron)$ ]] ; then
      :
    elif [[ "${UBUNTU_DISTRO_RELEASE}" == "24.04" ]] && [[ "${ROS_DISTRO}" =~ ^(jazzy|kilted)$ ]] ; then
      :
    else
        n2st::print_msg_error "Ubuntu distro ${UBUNTU_DISTRO_NAME} not compatible with ROS2 distro ${ROS_DISTRO}!"
        echo "Compatible configurations are:"
        echo "- Ubuntu 20.04 -> ROS2 Foxy or Galactic"
        echo "- Ubuntu 22.04 -> ROS2 Humble or Iron"
        echo "- Ubuntu 24.04 -> ROS2 Jazzy or Kilted"
        exit 1
    fi
    
    # ....Installer requirements ..................................................................
    apt-get update \
    && apt-get upgrade --assume-yes \
    && apt-get install --assume-yes --no-install-recommends \
        software-properties-common \
        curl \
        pkg-config \
    || exit 1

    if [[ "${UBUNTU_DISTRO_RELEASE}" == "22.04" ]]; then
        # Note systemd and udev must be updated before installing ros2 humble
        # Ref warning at https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html
        apt-get install --assume-yes --only-upgrade \
            systemd \
            udev \
        || exit 1
    fi

    rm -rf /var/lib/apt/lists/*

    # ....Setup Sources............................................................................
    add-apt-repository universe

    if [[ "${ROS_DISTRO:?err}" =~ ^(foxy|galactic)$ ]]; then
        curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
    else
        export ROS_APT_SOURCE_VERSION=$(curl -s https://api.github.com/repos/ros-infrastructure/ros-apt-source/releases/latest | grep -F "tag_name" | awk -F\" '{print $4}')
        curl -L -o /tmp/ros2-apt-source.deb "https://github.com/ros-infrastructure/ros-apt-source/releases/download/${ROS_APT_SOURCE_VERSION}/ros2-apt-source_${ROS_APT_SOURCE_VERSION}.$(. /etc/os-release && echo $UBUNTU_CODENAME)_all.deb"
        dpkg -i /tmp/ros2-apt-source.deb
    fi

    # ....Install ROS2 Requirements................................................................
    # Note: Reference ros-desktop vs cuda enabled opencv
    #   - Ref https://github.com/dusty-nv/jetson-containers/issues/158
    #   - Ref https://github.com/dusty-nv/jetson-containers/issues/89
    if [[ ${ROS_PKG} =~ "desktop".* ]] && [[ -n $(dpkg --get-selections | grep opencv) ]]; then \
      CV_WARN=("Removing previously installed version of opencv as it conflict with ros-${ROS_DISTRO}-${ROS_PKG} install process which install its own version.") \
      && apt-get purge -y *opencv* \
      && CV_WARN+=("Be advised that the ros-${ROS_DISTRO}-${ROS_PKG} opencv version is not CUDA enable and may interfere with the one installed by Pytorch or TensorFlow.") \
      && echo "${CV_WARN[*]}" >> /dn_warning.log \
      && echo -e "[WARNING] ${CV_WARN[*]}" ; \
    fi

    apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        apt-utils \
        lsb-release \
        build-essential \
        clang \
        gdb \
        python3-argcomplete \
        python3-distutils \
        python3-dev \
        libbullet-dev \
        libpython3-dev \
        python3-vcstools \
        python3-setuptools \
        python3-pycodestyle \
        python3-pygments \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    || exit 1

    python3 -m pip install --upgrade pip \
    && pip3 install --no-cache-dir  \
        scikit-build \
        six \
        msgpack \
    || exit 1

    if [[ "${UBUNTU_DISTRO_RELEASE}" == "20.04" ]]; then
        # Python 3.8 compatibility fixes for older Ubuntu
        # Note: pinning 'setuptools' is a quick hack for building ros2 example under ROS foxy focal amd64
        pip3 install --upgrade --no-cache-dir \
            setuptools==58.2.0 \
            pyparsing==2.4.7 \
            || exit 1
    fi

    # Note: ref cmake upgrade via pip:
    #  - upgrade cmake - https://stackoverflow.com/a/56690743
    #  - this is needed to build some of the ROS2 packages
    #  - use pip to upgrade cmake instead because of kitware's rotating GPG keys:
    # Source https://github.com/dusty-nv/jetson-containers/issues/216
    pip3 install --upgrade --no-cache-dir cmake || exit 1

EOF


RUN <<EOF

    # ....Install ROS2.............................................................................
    # Note: ROS2 doc recommend executing 'apt upgrade' just before installing ros
    apt-get update \
    && apt-get upgrade --assume-yes \
    && apt-get install --assume-yes --no-install-recommends \
        ros-${ROS_DISTRO}-${ROS_PKG} \
        python3-rosdep \
    && dpkg --configure -a \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    || exit 1

    # Note: pytest version is managed by 'colcon-common-extensions'
    apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        ros-dev-tools \
        python3-colcon-common-extensions \
        python3-colcon-mixin \
        libasio-dev \
        libtinyxml2-dev \
        libcunit1-dev \
        tree \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    || exit 1

    echo "Install python testing tools"
    # Note: pip 'flake8-blind-except' version
    #       ref https://github.com/ros2/examples/issues/325#issuecomment-936131710
    pip3 install --upgrade --no-cache-dir \
        flake8-blind-except==0.1.1 \
        flake8-builtins \
        flake8-class-newline \
        flake8-comprehensions \
        flake8-deprecated \
        flake8-docstrings \
        flake8-import-order \
        flake8-quotes \
        importlib-metadata \
        mock \
        nose \
        pep8 \
        pydocstyle \
        pyflakes \
        pytest-mock \
        pytest-repeat \
        pytest-rerunfailures \
        pytest-runner \
    || exit 1


    apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        ros-${ROS_DISTRO}-rosbridge-server \
        ros-${ROS_DISTRO}-rqt-graph \
        ros-${ROS_DISTRO}-rviz2 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*


    ## ToDo: assessment >> maybe not usefull anymore (pining setuptools as been moved earlier)
    # echo "Quick hack for building ros2 example under ROS foxy focal linux/amd64"  \
    # && pip3 install setuptools==58.2.0 \
    # && apt-get update \
    # && apt-get install --assume-yes \
    #     python3-catkin-pkg \
    #     python3-catkin-pkg-modules \
    # && apt-get clean \
    # && rm -rf /var/lib/apt/lists/*

EOF

# ====Build ROS2 workspace=========================================================================
# Note: Next line is for creating the directories without using a     to keep number of layer small
WORKDIR ${DN_DEV_WORKSPACE}/src

# ....Quick start workspace with a minimal ROS package.............................................
WORKDIR ${DN_DEV_WORKSPACE}
#RUN git clone https://github.com/ros2/examples src/examples -b ${ROS_DISTRO} \
#    && cd src/examples/rclpy || exit 1

## Note: both ros-${ROS_DISTRO}-demo-nodes-py and ros-${ROS_DISTRO}-demo-nodes-cpp are convenient \
##       package from https://github.com/ros2/examples
#RUN apt-get update \
#    && apt-get install --assume-yes --no-install-recommends \
#        ros-${ROS_DISTRO}-demo-nodes-py \
#        ros-${ROS_DISTRO}-demo-nodes-cpp \
#    && apt-get clean \
#    && rm -rf /var/lib/apt/lists/*

# Note: The goal is to have a minimum ros package to build. Only fetch rclpy as rclcpp is a lot
#        longer to build especily on non-native architecture.
#RUN wget --show-progress  \
#    --directory-prefix="src/examples" "https://raw.githubusercontent.com/ros2/examples/${ROS_DISTRO}/rclpy" \
#    && cd src/examples/rclpy || exit 1

RUN git clone --depth=1 https://github.com/ros2/examples src/ros2_examples -b ${ROS_DISTRO} \
    && cd src/ros2_examples \
    && git sparse-checkout set --no-cone rclpy/topics/minimal_publisher rclpy/topics/minimal_subscriber \
    && cd rclpy/topics/minimal_publisher || exit 1 \
    && cd - && cd rclpy/topics/minimal_subscriber || exit 1

RUN <<EOF
    # Note: For some reason, building ros2 example under ROS foxy focal linux/amd64 fail when
    #       "rosdep update" use those flags:
    #          $ rosdep update --rosdistro ${ROS_DISTRO} --include-eol-distros

    source /opt/ros/${ROS_DISTRO}/setup.bash

    apt-get update

    rosdep init || echo "rosdep already initialized"
    rosdep update --rosdistro "${ROS_DISTRO}"
    rosdep fix-permissions

    colcon mixin add default https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml \
      && colcon mixin update \
      && colcon metadata add default https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml \
      && colcon metadata update
EOF

WORKDIR ${DN_DEV_WORKSPACE}

RUN <<EOF
    source /opt/ros/${ROS_DISTRO}/setup.bash

    tree src/ros2_examples
    rosdep install  \
            --ignore-packages-from-source \
            --from-path ./src  \
            --rosdistro ${ROS_DISTRO}  \
            -y \
    && colcon version-check \
    || exit 1
EOF

ARG TARGETPLATFORM
ARG BUILDPLATFORM
# Note: The colcon flag "--cmake-clean-cache" reset the python3 env
RUN <<EOF
    COLCON_FLAGS=()
    if [[ ${TARGETPLATFORM:?err} != ${BUILDPLATFORM:?err} ]]; then
         echo -e "Builder is running in architecture virtualisation"
         COLCON_FLAGS+=(--executor sequential)
    else
         echo -e "Builder is running on native architecture"
         COLCON_FLAGS+=(--symlink-install)
    fi

    COLCON_FLAGS+=(
          --cmake-clean-cache
          --cmake-args -DCMAKE_BUILD_TYPE=Release
          --event-handlers console_direct+
       )
    echo -e "COLCON_FLAGS=("${COLCON_FLAGS[*]}")"

    source /opt/ros/${ROS_DISTRO}/setup.bash

    colcon build ${COLCON_FLAGS[@]} || exit 1

EOF

# ===Remove dustynv entrypoint from .bashrc. ======================================================
# Note: Source ROS in the dn_entrypoint.init.bash instead"
RUN sed --in-place "s;source /ros_entrypoint.sh;;" "$HOME/.bashrc" \
    && rm --force /ros_entrypoint.sh


FROM ros2-install AS test
ARG TARGETPLATFORM
ARG BUILDPLATFORM

WORKDIR ${DN_DEV_WORKSPACE}

RUN echo "sourcing /opt/ros/${ROS_DISTRO}/setup.bash" \
    && source /opt/ros/${ROS_DISTRO}/setup.bash \
    && echo "sourcing ${DN_DEV_WORKSPACE}/install/setup.bash" \
    && source ${DN_DEV_WORKSPACE}/install/setup.bash \
    && echo "Sanity check" \
    && echo ROS_VERSION=${ROS_VERSION:?'Build argument needs to be set and non-empty.'} \
    && echo ROS_PYTHON_VERSION=${ROS_PYTHON_VERSION:?'Build argument needs to be set and non-empty.'} \
    && echo ROS_DISTRO=${ROS_DISTRO:?'Build argument needs to be set and non-empty.'} \
    && echo PATH=${PATH} \
    && echo PYTHONPATH=${PYTHONPATH:?'Build argument needs to be set and non-empty.'} \
    && echo AMENT_PREFIX_PATH=${AMENT_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
#    && echo CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && echo COLCON_PREFIX_PATH=${COLCON_PREFIX_PATH:?'Build argument needs to be set and non-empty.'} \
    && python -c "import rclpy" \
    && ros2 pkg list \
    && colcon --log-level error test-result --all --verbose \
    || exit 1

RUN if [[ ${ROS_PKG} =~ "desktop".* ]] && [[ -n $(pip list | grep cv2) ]]; then \
      python3 -c "import cv2; print( f'Opencv version: {cv2.__version__}' )" ; \
    fi

RUN if [[ -n $(pip list | grep pytorch) ]] && [[ -n $(pip list | grep cv2) ]]; then \
      python3 -c "import torch; print( f'CUDA is available: {torch.cuda.is_available()}' )" ; \
    fi

RUN echo "Check workspace directory installation"  \
    && [[ -d ${DN_DEV_WORKSPACE}/build ]] \
    && [[ -d ${DN_DEV_WORKSPACE}/install ]] \
    && [[ -d ${DN_DEV_WORKSPACE}/log ]] \
    && [[ -d ${DN_DEV_WORKSPACE}/src ]] \
    || exit 1

FROM ros2-install AS final
ARG TARGETPLATFORM
ARG BUILDPLATFORM

CMD [ "bash" ]
