
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
ARG MIMIC_DEPENDENCIES_BASE_IMAGE
ARG MIMIC_DEPENDENCIES_BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS base-image

RUN touch /requirements.l4t-base-image.txt \
    && pip3 list --format freeze --not-required  \
              --exclude onnx  \
              --exclude torch2trt  \
              --exclude torchaudio  \
              --exclude tensorrt \
        > /requirements.l4t-base-image.txt

# ===Remove Jetson-container unused install========================================================
RUN rm --recursive --force /ros_deep_learning \
  && rm --recursive --force /jetson-inference

## (CRITICAL) ToDo: on task end >> delete next bloc ↓↓
FROM --platform="linux/arm64" base-image AS base-image-arm64
ARG TARGETPLATFORM
ARG TARGETARCH

## (CRITICAL) ToDo: on task end >> unmute next bloc ↓↓
#FROM --platform="linux/arm64" scratch AS base-image-arm64
#ARG TARGETPLATFORM
#ARG TARGETARCH
#COPY --from=base-image / /
## Note:
##   - This stage is a workaround to prevent the "max depth exceeded" error
##        occuring when the maximum number of docker layer as been reached.
##   - We use 'scratch' as base image since for simplicity we are copying everything from l4t base image anyway.
##     We could use 'arm64v8/ubuntu:20.04' but it would require extra work yo discriminate
##   - About nvidia l4t base images:
##       - nvcr.io/nvidia/l4t-base install the core CUDA ressources
##       - nvcr.io/nvidia/l4t-jetpack
##           - install several dev package such as nvidia-cuda-dev, nvidia-cudnn-dev and nvidia-tensorrt-dev
##           - mod their dockerfile to install runtime version of all those packages
##   - copying ROS ressources is relatively easy, however copying ressources installed
##       via pip vs apt-get or via source installed or pytorch related is a nightmare.
##       Work around for minimizing maintenance: copy everything
## Ref:
##   - https://gitlab.com/nvidia/container-images/l4t-base
##   - https://gitlab.com/nvidia/container-images/l4t-jetpack
##   - https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-base
##   - https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-jetpack
#
### ....copy artifact from base-image...............................................................
### Note: copying ROS ressources is relatively easy, however copying ressources installed
###       via pip vs apt-get or via source installed or pytorch related is a nightmare.
###       Work around for minimizing maintenance: copy everything
##COPY --from=base-image /lib /lib
##COPY --from=base-image /etc /etc
##COPY --from=base-image /usr /usr
##COPY --from=base-image /bin /bin
##COPY --from=base-image /var /var
##COPY --from=base-image /opt /opt
##COPY --from=base-image ${ROS_ROOT} ${ROS_ROOT}

FROM --platform="linux/amd64" ${MIMIC_DEPENDENCIES_BASE_IMAGE:?err}:${MIMIC_DEPENDENCIES_BASE_IMAGE_TAG:?err} AS base-image-amd64
ARG TARGETPLATFORM
ARG TARGETARCH

FROM --platform=${TARGETPLATFORM} base-image-${TARGETARCH} AS l4t-multiarch-base-image
ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Etc/UTC
ENV TERM=${TERM:-"xterm-256color"}

# ....Transfer environment variable from base-images...............................................
# Env var specific to 'nvcr.io/nvidia/l4t-jetpack' base images
ARG CUDA_HOME
ARG NVIDIA_VISIBLE_DEVICES
ARG NVIDIA_DRIVER_CAPABILITIES
ARG PATH
ARG LD_LIBRARY_PATH

ENV CUDA_HOME=${CUDA_HOME:?'Environment variable was not passed from base-image build stage'}
ENV NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:?'Environment variable was not passed from base-image build stage'}
ENV NVIDIA_DRIVER_CAPABILITIES=${NVIDIA_DRIVER_CAPABILITIES:?'Environment variable was not passed from base-image build stage'}

# Note: Those are mandatory for CUDA to work
#   See https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions
ENV PATH=${PATH:?'Environment variable was not passed from base-image build stage'}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH:?'Environment variable was not passed from base-image build stage'}

# ....The following env var does not appear in every jetson-container ros base images..............
# Env var added by jetson-container pytorch related base images
ARG OPENBLAS_CORETYPE
ENV OPENBLAS_CORETYPE=${OPENBLAS_CORETYPE}
ARG TORCH_HOME
ENV TORCH_HOME=${TORCH_HOME}

# En var added by jetson-container tensorflow related base images
ARG PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=${PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION}

# En var added by jetson-container 'dustynv/ros' base images
ARG LD_PRELOAD
ENV LD_PRELOAD=${LD_PRELOAD}

# En var added by 'nvcr.io/nvidia/pytorch' base images
ARG TENSORBOARD_PORT
ENV TENSORBOARD_PORT=${TENSORBOARD_PORT}
ARG JUPYTER_PORT
ENV JUPYTER_PORT=${JUPYTER_PORT}


FROM --platform=${TARGETPLATFORM} l4t-multiarch-base-image AS ros2-python-compatible

# ....Make python 3 default........................................................................
RUN if [[ ! $(which python) =~ .*"python3".* ]]; then \
          apt-get update \
          &&  apt-get install -y --no-install-recommends \
              gcc \
              python3-dev \
              python3-pip \
          && rm -rf /var/lib/apt/lists/* \
          && apt-get clean ; \
    fi


# Update symlink to point to system python3 instead of system python2 or conda python
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \
    && update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

RUN python3 -m pip install --upgrade pip \
    && pip3 install --upgrade --no-cache-dir \
        wheel \
        setuptools \
        packaging \
        'Cython<3' \
    && pip3 install --no-cache-dir  \
          wget \
          psutil


# (CRITICAL) ToDo: on task end >> delete next bloc ↓↓
ARG TARGETPLATFORM
ARG TARGETARCH
RUN echo "DEV test bloc" \
    && echo -e "        TARGETPLATFORM: $(echo ${TARGETPLATFORM:?'Env var not set in container'})" \
    && echo -e "            TARGETARCH: $(echo ${TARGETARCH:?'Env var not set in container'})" \
    && echo -e "                  PATH: $(echo $PATH)" \
    && echo -e "              pip list: $(pip list)" \
    && echo -e "Current python version: $(python --version)" \
    && echo -e "   Current pip version: $(pip --version)" \
    && echo -e "        which python's: $(which python python3)" \
    && echo -e "        whereis python: $(whereis python)" \
    && echo -e "           which pip's: $(which pip pip3)" \
    && echo -e "           whereis pip: $(whereis pip)" \
    && if [[ ! $(python --version) =~ "Python 3.".* ]]; then \
      echo "Need python 3" && exit 1 ; \
    fi &&  \
    if [[ $(which python) != "/usr/bin/python" ]]; then \
      echo "ROS2 does not behave well with conda python environment, make sure the default python is either the system python or a virtual environment" && exit 1 ; \
    fi


FROM --platform="linux/amd64" ros2-python-compatible AS mimic-l4t-image

COPY --from=base-image /requirements.l4t-base-image.txt /requirements.l4t-base-image.txt

# ....Reinstall l4t image package in amd64 image...................................................
RUN apt-get update  \
    && echo "..general install related........."  \
    && apt-get install -y --no-install-recommends \
        build-essential \
        software-properties-common \
        apt-transport-https \
        ca-certificates \
        lsb-release \
        pkg-config \
        gnupg \
        git \
        wget \
        curl \
        nano \
        zip \
        unzip \
    && echo "..pytorch install related........."  \
    && apt-get install -y --no-install-recommends \
        libopenblas-dev \
        libopenmpi-dev \
        openmpi-bin \
        openmpi-common \
        gfortran \
        libomp-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && pip3 install --no-cache-dir \
        scikit-build  \
        ninja

# Requirement for 'graphsurgeon' and 'uff', it give access to nvidia pip index
RUN pip3 install --no-cache-dir nvidia-pyindex

# Requirement for 'pycairo' which is required by 'pycuda'
RUN apt-get update  \
    && apt-get install -y --no-install-recommends \
      libcairo2-dev \
      pkg-config \
      python3-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Use the following command in a l4t container to fetch the current list of python pkg
#       $ pip3 list --format freeze --not-required --exclude onnx --exclude torch2trt --exclude torchaudio --exclude tensorrt
# which in l4t-pytorch result in the following list
#RUN pip3 install --no-cache-dir  $(echo " \
#    certifi \
#    chardet \
#    cmake \
#    Cython \
#    dbus-python \
#    idna \
#    ninja \
#    pip \
#    psutil \
#    PyGObject \
#    python-apt \
#    requests-unixsocket \
#    scikit-build \
#    six \
#    torch \
#    torchvision \
#    uff \
#    urllib3 \
#    wget \
#    ")
##    " | sed 's/==.*//')

#    pycuda==2023.1 \
#    PySoundFile==0.9.0.post1 \

RUN echo "Strip versions from requirement"  \
    && sed -i.bak 's/==.*//g' /requirements.l4t-base-image.txt  \
    && rm /requirements.l4t-base-image.txt.bak

# (Priority) ToDo: investigate?? >> pycuda install is failling
RUN echo "Strip pycuda from requirement"  \
    && sed -i.bak 's/pycuda.*//g' /requirements.l4t-base-image.txt  \
    && rm /requirements.l4t-base-image.txt.bak

RUN pip3 install --no-cache-dir -r /requirements.l4t-base-image.txt

## Use $ pip3 list --format freeze --exclude onnx --exclude torch2trt --exclude torchaudio --exclude tensorrt
#RUN pip3 install --no-cache-dir  $(echo " \
#appdirs \
#certifi \
#cffi \
#chardet \
#cmake \
#Cython \
#dbus-python \
#distro \
#filelock \
#graphsurgeon \
#idna \
#Jinja2 \
#Mako \
#MarkupSafe \
#mpmath \
#networkx \
#ninja \
#numpy \
#packaging \
#Pillow \
#pip \
#platformdirs \
#protobuf \
#psutil \
#pycparser \
#pycuda \
#PyGObject \
#PySoundFile \
#python-apt \
#pytools \
#requests \
#requests-unixsocket \
#scikit-build \
#setuptools \
#six \
#sympy \
#tomli \
#torch \
#torchvision \
#typing_extensions \
#uff \
#urllib3 \
#wget \
#wheel \
#")


RUN echo "Quickhack for the 'DeprecationWarning: pkg_resources is deprecated as an API' warning" \
    && pip3 install --no-cache-dir  setuptools==58.2.0


# (NICE TO HAVE) ToDo: add the explicit install step for torch2trt and tensorrt (ref task TASK)
# Ref
#   - https://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html#installing
#   - https://github.com/NVIDIA-AI-IOT/torch2trt
#   - https://github.com/dusty-nv/jetson-containers/blob/master/packages/pytorch/torch2trt/Dockerfile


# (CRITICAL) ToDo: on task end >> delete next bloc ↓↓
ARG TARGETPLATFORM
ARG TARGETARCH
RUN echo "DEV test bloc" \
    && echo -e "        TARGETPLATFORM: $(echo ${TARGETPLATFORM:?'Env var not set in container'})" \
    && echo -e "            TARGETARCH: $(echo ${TARGETARCH:?'Env var not set in container'})" \
    && echo -e "                  PATH: $(echo $PATH)" \
    && echo -e "              pip list: $(pip list)" \
    && echo -e "Current python version: $(python --version)" \
    && echo -e "   Current pip version: $(pip --version)" \
    && echo -e "        which python's: $(which python python3)" \
    && echo -e "        whereis python: $(whereis python)" \
    && echo -e "           which pip's: $(which pip pip3)" \
    && echo -e "           whereis pip: $(whereis pip)" \
#    && pip3 show pycuda \
#    && python3 -c "import pycuda; print( pycuda.VERSION_TEXT )" \
    && pip3 show torch \
    && python3 -c "import torch; print( f'CUDA is available: {torch.cuda.is_available()}' )"


FROM --platform="linux/arm64" ros2-python-compatible AS final-arm64
ARG TARGETPLATFORM
ARG TARGETARCH

FROM --platform="linux/amd64" mimic-l4t-image AS final-amd64
ARG TARGETPLATFORM
ARG TARGETARCH

FROM --platform=${TARGETPLATFORM} final-${TARGETARCH} AS test
ARG TARGETPLATFORM
ARG TARGETARCH

RUN echo -e "Current python version: $(python --version)" \
    && echo -e "          which python: $(which python)" \
    && echo -e "        whereis python: $(whereis python)" \
    && echo -e "             which pip: $(which pip)" \
    && echo -e "           whereis pip: $(whereis pip)" \
    && if [[ ! $(python --version) =~ "Python 3.".* ]]; then \
      echo "Need python 3" && exit 1 ; \
    fi &&  \
    if [[ $(which python) != "/usr/bin/python" ]] || [[ $(which python) == "/opt/conda/bin/python" ]]; then \
      echo "ROS2 does not behave well with conda python environment, make sure the default python is either the system python or a virtual environment" && exit 1 ; \
    fi

RUN echo "Check CUDA installed version" \
    && nvcc --version | grep "release" | awk '{print $6}' | cut -c2-

RUN echo -e "    TARGETPLATFORM: $(echo ${TARGETPLATFORM:?'Env var not set in container'})" \
    && echo -e "        TARGETARCH: $(echo ${TARGETARCH:?'Env var not set in container'})" \
    && echo -e "              PATH: $(echo $PATH)" \
    && echo -e "              pip list: $(pip list)" \
    && echo -e "Current python version: $(python --version)" \
    && echo -e "   Current pip version: $(pip --version)" \
    && echo -e "          which python's: $(which python python3)" \
    && echo -e "        whereis python: $(whereis python)" \
    && echo -e "             which pip's: $(which pip pip3)" \
    && echo -e "           whereis pip: $(whereis pip)" \
#    && pip3 show pycuda \
#    && python3 -c "import pycuda; print( pycuda.VERSION_TEXT )" \
    && pip3 show torch \
    && python3 -c "import torch; print( f'CUDA is available: {torch.cuda.is_available()}' )"

FROM final-${TARGETARCH} AS final
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Note: see https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope
#       for docker buildx environment variables available inside the container: i.e. [TARGET|BUILD]PLATFORM
RUN echo "Dockerized-NorLab build system › image for target device: ${TARGETPLATFORM:?'Buildx environment variables not available in container'}" \
    && echo "(CRITICAL) ToDo: on task end >> delete next if clause ↓↓" \
    && if [[ "${TARGETPLATFORM}" =~ "linux/arm64".* ]] && [[ "$(uname --machine)" == "x86_64" ]]; then \
      echo "base-image-squash at stage final aarch missmatch" || exit 1 ; \
    fi

CMD [ "bash" ]
