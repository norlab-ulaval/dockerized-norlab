
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS project-setup

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

# ====Dockerized-NorLab-project configuration step=================================================
# eg: f1tenth_controller, NorLab_MPPI
ARG DN_PROJECT_GIT_NAME
ENV DN_PROJECT_GIT_NAME=${DN_PROJECT_GIT_NAME:?'Build argument needs to be set and non-empty.'}
# eg: norlab-ulaval, vaul-ulaval
ARG DN_PROJECT_GIT_DOMAIN
ENV DN_PROJECT_GIT_DOMAIN=${DN_PROJECT_GIT_DOMAIN:?'Build argument needs to be set and non-empty.'}

ARG DN_PROJECT_USER
ARG DN_PROJECT_UID
ARG DN_PROJECT_GID
ENV DN_PROJECT_USER=${DN_PROJECT_USER:?'Build argument needs to be set and non-empty.'}
ENV DN_PROJECT_UID=${DN_PROJECT_UID:?'Build argument needs to be set and non-empty.'}
ENV DN_PROJECT_GID=${DN_PROJECT_GID:?'Build argument needs to be set and non-empty.'}

ENV DN_PROJECT_USER_HOME=/home/${DN_PROJECT_USER}
ENV DN_PROJECT_PATH=${DN_DEV_WORKSPACE:?'Build argument needs to be set and non-empty.'}/src/${DN_PROJECT_GIT_NAME}

COPY --from=context-dn-container-tools ./dn_project_core_init.bash /dn_project_core_init.bash
RUN <<EOF
    source /dn_project_core_init.bash
    rm -f /dn_project_core_init.bash
    { test -d ${DN_PROJECT_USER_HOME} && test -d ${DN_PROJECT_PATH} ; } || exit 1
EOF


# ====User Project custom steps====================================================================
FROM project-setup AS project-custom-docker-steps

# ToDo: add custom step here


# ====Project custom python libraries==============================================================

# (NICE TO HAVE) ToDo: refactor to dn_project_core_init.bash (ref task RLRP-213 and NMO-548)
COPY ./project_requirements/python.requirements.txt /python.requirements.txt
COPY ./project_requirements/shell.requirements.bash /shell.requirements.bash

# (NICE TO HAVE) ToDo: refactor to dn_project_core_init.bash (ref task RLRP-213 and NMO-548)
RUN <<EOF
  pip3 install --verbose \
    -r /python.requirements.txt \
    && rm -f /python.requirements.txt
#    --no-cache-dir \
#    --upgrade \

  source /shell.requirements.bash \
    && rm -f /shell.requirements.bash
EOF


# ====DN-project final=============================================================================
FROM project-custom-docker-steps AS final

# (NICE TO HAVE) ToDo: refactor project_entrypoints logic a fct. Either in DN container-tools or in DN-project
# Note: project-develop container mounth those directories as a volume to skip rebuilding
#       each time they are modify (see docker-compose.project.run.*.yaml). However, project-deploy
#       and project release container will need them copied in the image for portability.
# Note: Files copied from project_entrypoints/ directory are required by Dockerized-NorLab
#       dn_entrypoint.init.bash and dn_entrypoint.attach.bash
WORKDIR /project_entrypoints
ENV MOCK_PROJECT_ENTRYPOINT_PATH=./project_entrypoints
COPY ${MOCK_PROJECT_ENTRYPOINT_PATH} .
COPY --from=context-dn-container-tools ./dn_project_core_finalize.bash /dn_project_core_finalize.bash
RUN <<EOF
    # Note: DN-project path would be ".dockerized_norlab_project/configuration/project_entrypoints"
    for each_file in ./dn_entrypoint.*.bash; do
      chmod +x "${each_file}"
    done

    for each_file in ./project-*/dn_entrypoint.*.bash; do
      chmod +x "${each_file}"
    done

    source /dn_project_core_finalize.bash || exit 1
    rm -f /dn_project_core_finalize.bash
EOF

ENV DN_ENTRYPOINT_TRACE_EXECUTION=true

WORKDIR ${DN_PROJECT_PATH:?'environment variable is not set'}
CMD [ "bash" ]

